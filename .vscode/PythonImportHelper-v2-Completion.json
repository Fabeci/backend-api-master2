[
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "Pays",
        "importPath": "locations.models",
        "description": "locations.models",
        "isExtraImport": true,
        "detail": "locations.models",
        "documentation": {}
    },
    {
        "label": "Pays",
        "importPath": "locations.models",
        "description": "locations.models",
        "isExtraImport": true,
        "detail": "locations.models",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "AnneeScolaire",
        "importPath": "academics.models",
        "description": "academics.models",
        "isExtraImport": true,
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Classe",
        "importPath": "academics.models",
        "description": "academics.models",
        "isExtraImport": true,
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "DomaineEtude",
        "importPath": "academics.models",
        "description": "academics.models",
        "isExtraImport": true,
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Filiere",
        "importPath": "academics.models",
        "description": "academics.models",
        "isExtraImport": true,
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Groupe",
        "importPath": "academics.models",
        "description": "academics.models",
        "isExtraImport": true,
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Inscription",
        "importPath": "academics.models",
        "description": "academics.models",
        "isExtraImport": true,
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Institution",
        "importPath": "academics.models",
        "description": "academics.models",
        "isExtraImport": true,
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Matiere",
        "importPath": "academics.models",
        "description": "academics.models",
        "isExtraImport": true,
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Specialite",
        "importPath": "academics.models",
        "description": "academics.models",
        "isExtraImport": true,
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "AnneeScolaire",
        "importPath": "academics.models",
        "description": "academics.models",
        "isExtraImport": true,
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Classe",
        "importPath": "academics.models",
        "description": "academics.models",
        "isExtraImport": true,
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "DomaineEtude",
        "importPath": "academics.models",
        "description": "academics.models",
        "isExtraImport": true,
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Filiere",
        "importPath": "academics.models",
        "description": "academics.models",
        "isExtraImport": true,
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Groupe",
        "importPath": "academics.models",
        "description": "academics.models",
        "isExtraImport": true,
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Inscription",
        "importPath": "academics.models",
        "description": "academics.models",
        "isExtraImport": true,
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Matiere",
        "importPath": "academics.models",
        "description": "academics.models",
        "isExtraImport": true,
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Specialite",
        "importPath": "academics.models",
        "description": "academics.models",
        "isExtraImport": true,
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Groupe",
        "importPath": "academics.models",
        "description": "academics.models",
        "isExtraImport": true,
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Matiere",
        "importPath": "academics.models",
        "description": "academics.models",
        "isExtraImport": true,
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Groupe",
        "importPath": "academics.models",
        "description": "academics.models",
        "isExtraImport": true,
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Institution",
        "importPath": "academics.models",
        "description": "academics.models",
        "isExtraImport": true,
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Specialite",
        "importPath": "academics.models",
        "description": "academics.models",
        "isExtraImport": true,
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Admin",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "Admin",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "Apprenant",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "Formateur",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "Parent",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "ResponsableAcademique",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "AdminSerializer",
        "importPath": "users.serializers",
        "description": "users.serializers",
        "isExtraImport": true,
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "ApprenantSerializer",
        "importPath": "users.serializers",
        "description": "users.serializers",
        "isExtraImport": true,
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "FormateurSerializer",
        "importPath": "users.serializers",
        "description": "users.serializers",
        "isExtraImport": true,
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "exception_handler",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "AnneeScolaireSerializer",
        "importPath": "academics.serializers",
        "description": "academics.serializers",
        "isExtraImport": true,
        "detail": "academics.serializers",
        "documentation": {}
    },
    {
        "label": "ClasseSerializer",
        "importPath": "academics.serializers",
        "description": "academics.serializers",
        "isExtraImport": true,
        "detail": "academics.serializers",
        "documentation": {}
    },
    {
        "label": "FiliereSerializer",
        "importPath": "academics.serializers",
        "description": "academics.serializers",
        "isExtraImport": true,
        "detail": "academics.serializers",
        "documentation": {}
    },
    {
        "label": "GroupeSerializer",
        "importPath": "academics.serializers",
        "description": "academics.serializers",
        "isExtraImport": true,
        "detail": "academics.serializers",
        "documentation": {}
    },
    {
        "label": "InscriptionSerializer",
        "importPath": "academics.serializers",
        "description": "academics.serializers",
        "isExtraImport": true,
        "detail": "academics.serializers",
        "documentation": {}
    },
    {
        "label": "InstitutionSerializer",
        "importPath": "academics.serializers",
        "description": "academics.serializers",
        "isExtraImport": true,
        "detail": "academics.serializers",
        "documentation": {}
    },
    {
        "label": "DomaineEtudeSerializer",
        "importPath": "academics.serializers",
        "description": "academics.serializers",
        "isExtraImport": true,
        "detail": "academics.serializers",
        "documentation": {}
    },
    {
        "label": "MatiereSerializer",
        "importPath": "academics.serializers",
        "description": "academics.serializers",
        "isExtraImport": true,
        "detail": "academics.serializers",
        "documentation": {}
    },
    {
        "label": "SpecialiteSerializer",
        "importPath": "academics.serializers",
        "description": "academics.serializers",
        "isExtraImport": true,
        "detail": "academics.serializers",
        "documentation": {}
    },
    {
        "label": "Cours",
        "importPath": "courses.models",
        "description": "courses.models",
        "isExtraImport": true,
        "detail": "courses.models",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "courses.models",
        "description": "courses.models",
        "isExtraImport": true,
        "detail": "courses.models",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "courses.models",
        "description": "courses.models",
        "isExtraImport": true,
        "detail": "courses.models",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "courses.models",
        "description": "courses.models",
        "isExtraImport": true,
        "detail": "courses.models",
        "documentation": {}
    },
    {
        "label": "Cours",
        "importPath": "courses.models",
        "description": "courses.models",
        "isExtraImport": true,
        "detail": "courses.models",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "courses.models",
        "description": "courses.models",
        "isExtraImport": true,
        "detail": "courses.models",
        "documentation": {}
    },
    {
        "label": "Cours",
        "importPath": "courses.models",
        "description": "courses.models",
        "isExtraImport": true,
        "detail": "courses.models",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "courses.models",
        "description": "courses.models",
        "isExtraImport": true,
        "detail": "courses.models",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "Evaluation",
        "importPath": "evaluations.models",
        "description": "evaluations.models",
        "isExtraImport": true,
        "detail": "evaluations.models",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "send_activation_email",
        "importPath": "users.utils",
        "description": "users.utils",
        "isExtraImport": true,
        "detail": "users.utils",
        "documentation": {}
    },
    {
        "label": "send_verification_email",
        "importPath": "users.utils",
        "description": "users.utils",
        "isExtraImport": true,
        "detail": "users.utils",
        "documentation": {}
    },
    {
        "label": "send_activation_email",
        "importPath": "users.utils",
        "description": "users.utils",
        "isExtraImport": true,
        "detail": "users.utils",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_encode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_encode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_encode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_encode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_decode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_decode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "default_token_generator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "default_token_generator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "default_token_generator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "default_token_generator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "default_token_generator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "default_token_generator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "AuthenticationFailed",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthenticationFailed",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "NotAuthenticated",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "post_migrate",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "academics.migrations.0001_initial",
        "description": "academics.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AnneeScolaire',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('annee_format_classique', models.CharField(blank=True, help_text=\"Format classique de l'année (ex: 2023-2024)\", max_length=9, null=True)),",
        "detail": "academics.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "academics.migrations.0002_initial",
        "description": "academics.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('academics', '0001_initial'),\n        ('locations', '0001_initial'),\n        ('users', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='classe',",
        "detail": "academics.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "academics.migrations.0003_anneescolaire_description_classe_date_creation_and_more",
        "description": "academics.migrations.0003_anneescolaire_description_classe_date_creation_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('academics', '0002_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='anneescolaire',\n            name='description',\n            field=models.TextField(blank=True, null=True),\n        ),",
        "detail": "academics.migrations.0003_anneescolaire_description_classe_date_creation_and_more",
        "documentation": {}
    },
    {
        "label": "AcademicsConfig",
        "kind": 6,
        "importPath": "academics.apps",
        "description": "academics.apps",
        "peekOfCode": "class AcademicsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'academics'",
        "detail": "academics.apps",
        "documentation": {}
    },
    {
        "label": "Institution",
        "kind": 6,
        "importPath": "academics.models",
        "description": "academics.models",
        "peekOfCode": "class Institution(models.Model):\n    nom = models.CharField(max_length=200)\n    pays = models.ForeignKey(Pays, on_delete=models.CASCADE, related_name='etablissements')\n    formateurs = models.ManyToManyField('users.Formateur', related_name='institutions_academics')\n    adresse = models.CharField(max_length=255, null=True, blank=True)\n    date_creation = models.DateTimeField(auto_now=True)\n    telephone = models.CharField(max_length=15, null=True, blank=True)\n    email = models.EmailField(null=True, blank=True)\n    logo = models.ImageField(upload_to='institution_logos/', null=True, blank=True)\n    description = models.TextField(null=True, blank=True)",
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Departement",
        "kind": 6,
        "importPath": "academics.models",
        "description": "academics.models",
        "peekOfCode": "class Departement(models.Model):\n    nom = models.CharField(max_length=255)\n    description = models.TextField(null=True, blank=True)\n    institution = models.ForeignKey(Institution, on_delete=models.CASCADE, related_name='departements')\n    responsable_academique = models.ForeignKey(\n        'users.ResponsableAcademique', \n        on_delete=models.CASCADE,\n        related_name='departements'\n        )\n    def __str__(self):",
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "DomaineEtude",
        "kind": 6,
        "importPath": "academics.models",
        "description": "academics.models",
        "peekOfCode": "class DomaineEtude(models.Model):\n    nom = models.CharField(max_length=100)\n    description = models.TextField(null=True, blank=True)\n    def __str__(self):\n        return self.nom\nclass Filiere(models.Model):\n    nom = models.CharField(max_length=255)\n    domaine_etude = models.ForeignKey(DomaineEtude, on_delete=models.CASCADE, related_name='filieres')\n    description = models.TextField(null=True, blank=True)\n    date_creation = models.DateTimeField(auto_now=True)",
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Filiere",
        "kind": 6,
        "importPath": "academics.models",
        "description": "academics.models",
        "peekOfCode": "class Filiere(models.Model):\n    nom = models.CharField(max_length=255)\n    domaine_etude = models.ForeignKey(DomaineEtude, on_delete=models.CASCADE, related_name='filieres')\n    description = models.TextField(null=True, blank=True)\n    date_creation = models.DateTimeField(auto_now=True)\n    statut = models.CharField(max_length=50, choices=[('actif', 'Actif'), ('en_pause', 'En Pause'), ('archive', 'Archivée')], default='actif')\n    def __str__(self):\n        return self.nom\nclass Matiere(models.Model):\n    nom = models.CharField(max_length=255)",
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Matiere",
        "kind": 6,
        "importPath": "academics.models",
        "description": "academics.models",
        "peekOfCode": "class Matiere(models.Model):\n    nom = models.CharField(max_length=255)\n    description = models.TextField(null=True, blank=True)\n    def __str__(self):\n        return self.nom\nclass Groupe(models.Model):\n    nom = models.CharField(max_length=100)\n    enseignants = models.ManyToManyField('users.Formateur', related_name='academics_groupes')\n    description = models.TextField(null=True, blank=True)\n    def __str__(self):",
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Groupe",
        "kind": 6,
        "importPath": "academics.models",
        "description": "academics.models",
        "peekOfCode": "class Groupe(models.Model):\n    nom = models.CharField(max_length=100)\n    enseignants = models.ManyToManyField('users.Formateur', related_name='academics_groupes')\n    description = models.TextField(null=True, blank=True)\n    def __str__(self):\n        return self.nom\nclass Classe(models.Model):\n    nom = models.CharField(max_length=255)\n    description = models.TextField(null=True, blank=True)\n    date_creation = models.DateTimeField(auto_now=True)",
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Classe",
        "kind": 6,
        "importPath": "academics.models",
        "description": "academics.models",
        "peekOfCode": "class Classe(models.Model):\n    nom = models.CharField(max_length=255)\n    description = models.TextField(null=True, blank=True)\n    date_creation = models.DateTimeField(auto_now=True)\n    filieres = models.ManyToManyField(Filiere, related_name='classes')\n    matieres = models.ManyToManyField(Matiere, related_name='classes')\n    groupes = models.ForeignKey(Groupe, on_delete=models.CASCADE, related_name='classe', null=True, blank=True)\n    apprenants = models.ForeignKey('users.Apprenant', on_delete=models.CASCADE, related_name='apprenants_classe_institution', null=True, blank=True)\n    def __str__(self):\n        return self.nom",
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Specialite",
        "kind": 6,
        "importPath": "academics.models",
        "description": "academics.models",
        "peekOfCode": "class Specialite(models.Model):\n    nom = models.CharField(max_length=255)\n    description = models.TextField(blank=True, null=True)\n    def __str__(self):\n        return self.nom\nclass AnneeScolaire(models.Model):\n    annee_format_classique = models.CharField(\n        max_length=9,\n        null=True,\n        blank=True,",
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "AnneeScolaire",
        "kind": 6,
        "importPath": "academics.models",
        "description": "academics.models",
        "peekOfCode": "class AnneeScolaire(models.Model):\n    annee_format_classique = models.CharField(\n        max_length=9,\n        null=True,\n        blank=True,\n        help_text=\"Format classique de l'année (ex: 2023-2024)\"\n    )\n    date_debut = models.DateField(\n        null=True,\n        blank=True,",
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "Inscription",
        "kind": 6,
        "importPath": "academics.models",
        "description": "academics.models",
        "peekOfCode": "class Inscription(models.Model):\n    apprenant = models.ForeignKey('users.Apprenant', on_delete=models.CASCADE)\n    institution = models.ForeignKey(Institution, on_delete=models.CASCADE)\n    annee_scolaire = models.ForeignKey(AnneeScolaire, on_delete=models.CASCADE)\n    statut = models.CharField(max_length=20, choices=[\n        ('actif', 'Actif'),\n        ('diplome', 'Diplômé'),\n        ('retire', 'Retiré'),\n    ])\n    statut_paiement = models.CharField(max_length=20, choices=[",
        "detail": "academics.models",
        "documentation": {}
    },
    {
        "label": "InstitutionSerializer",
        "kind": 6,
        "importPath": "academics.serializers",
        "description": "academics.serializers",
        "peekOfCode": "class InstitutionSerializer(serializers.ModelSerializer):\n    administrateur = AdminSerializer(write_only=True)  # Champ pour les détails de l'Admin\n    class Meta:\n        model = Institution\n        fields = ['nom', 'pays', 'adresse', 'telephone', 'email', 'logo', 'description', 'statut', 'type_institution', \n                  'nombre_etudiants', 'site_web', 'accreditations', 'administrateur']\n    def create(self, validated_data):\n        admin_data = validated_data.pop('administrateur')\n        # Création de l'Institution\n        institution = Institution.objects.create(**validated_data)",
        "detail": "academics.serializers",
        "documentation": {}
    },
    {
        "label": "DomaineEtudeSerializer",
        "kind": 6,
        "importPath": "academics.serializers",
        "description": "academics.serializers",
        "peekOfCode": "class DomaineEtudeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = DomaineEtude\n        fields = '__all__'\nclass MatiereSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Matiere\n        fields = '__all__'\nclass SpecialiteSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "academics.serializers",
        "documentation": {}
    },
    {
        "label": "MatiereSerializer",
        "kind": 6,
        "importPath": "academics.serializers",
        "description": "academics.serializers",
        "peekOfCode": "class MatiereSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Matiere\n        fields = '__all__'\nclass SpecialiteSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Specialite\n        fields = '__all__'\nclass AnneeScolaireSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "academics.serializers",
        "documentation": {}
    },
    {
        "label": "SpecialiteSerializer",
        "kind": 6,
        "importPath": "academics.serializers",
        "description": "academics.serializers",
        "peekOfCode": "class SpecialiteSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Specialite\n        fields = '__all__'\nclass AnneeScolaireSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = AnneeScolaire\n        fields = '__all__'\nclass FiliereSerializer(serializers.ModelSerializer):\n    domaine_etude = serializers.StringRelatedField()  # Affiche le nom du domaine d'étude",
        "detail": "academics.serializers",
        "documentation": {}
    },
    {
        "label": "AnneeScolaireSerializer",
        "kind": 6,
        "importPath": "academics.serializers",
        "description": "academics.serializers",
        "peekOfCode": "class AnneeScolaireSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = AnneeScolaire\n        fields = '__all__'\nclass FiliereSerializer(serializers.ModelSerializer):\n    domaine_etude = serializers.StringRelatedField()  # Affiche le nom du domaine d'étude\n    class Meta:\n        model = Filiere\n        fields = ['id', 'nom', 'domaine_etude', 'description', 'date_creation', 'statut']\nclass GroupeSerializer(serializers.ModelSerializer):",
        "detail": "academics.serializers",
        "documentation": {}
    },
    {
        "label": "FiliereSerializer",
        "kind": 6,
        "importPath": "academics.serializers",
        "description": "academics.serializers",
        "peekOfCode": "class FiliereSerializer(serializers.ModelSerializer):\n    domaine_etude = serializers.StringRelatedField()  # Affiche le nom du domaine d'étude\n    class Meta:\n        model = Filiere\n        fields = ['id', 'nom', 'domaine_etude', 'description', 'date_creation', 'statut']\nclass GroupeSerializer(serializers.ModelSerializer):\n    enseignants = serializers.StringRelatedField(many=True)  # Affiche les formateurs associés\n    class Meta:\n        model = Groupe\n        fields = ['id', 'nom', 'enseignants', 'description']",
        "detail": "academics.serializers",
        "documentation": {}
    },
    {
        "label": "GroupeSerializer",
        "kind": 6,
        "importPath": "academics.serializers",
        "description": "academics.serializers",
        "peekOfCode": "class GroupeSerializer(serializers.ModelSerializer):\n    enseignants = serializers.StringRelatedField(many=True)  # Affiche les formateurs associés\n    class Meta:\n        model = Groupe\n        fields = ['id', 'nom', 'enseignants', 'description']\nclass ClasseSerializer(serializers.ModelSerializer):\n    filieres = FiliereSerializer(many=True)  # Sérialise les filières associées\n    matieres = serializers.StringRelatedField(many=True)  # Sérialise les matières\n    groupes = GroupeSerializer()  # Sérialise le groupe associé\n    apprenants = serializers.StringRelatedField()  # Sérialise l'apprenant associé",
        "detail": "academics.serializers",
        "documentation": {}
    },
    {
        "label": "ClasseSerializer",
        "kind": 6,
        "importPath": "academics.serializers",
        "description": "academics.serializers",
        "peekOfCode": "class ClasseSerializer(serializers.ModelSerializer):\n    filieres = FiliereSerializer(many=True)  # Sérialise les filières associées\n    matieres = serializers.StringRelatedField(many=True)  # Sérialise les matières\n    groupes = GroupeSerializer()  # Sérialise le groupe associé\n    apprenants = serializers.StringRelatedField()  # Sérialise l'apprenant associé\n    class Meta:\n        model = Classe\n        fields = ['id', 'nom', 'description', 'date_creation', 'filieres', 'matieres', 'groupes', 'apprenants']\nclass InscriptionSerializer(serializers.ModelSerializer):\n    apprenant = serializers.StringRelatedField()  # Affiche les informations de l'apprenant (par exemple, son nom)",
        "detail": "academics.serializers",
        "documentation": {}
    },
    {
        "label": "InscriptionSerializer",
        "kind": 6,
        "importPath": "academics.serializers",
        "description": "academics.serializers",
        "peekOfCode": "class InscriptionSerializer(serializers.ModelSerializer):\n    apprenant = serializers.StringRelatedField()  # Affiche les informations de l'apprenant (par exemple, son nom)\n    institution = serializers.StringRelatedField()  # Affiche le nom de l'institution\n    annee_scolaire = serializers.StringRelatedField()  # Affiche l'année scolaire associée\n    class Meta:\n        model = Inscription\n        fields = ['id', 'apprenant', 'institution', 'annee_scolaire', 'statut', 'statut_paiement']",
        "detail": "academics.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "academics.urls",
        "description": "academics.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'domaines-etudes', DomaineEtudeViewSet, basename='domaine')\nrouter.register(r'matieres', MatiereViewSet, basename='matiere')\nrouter.register(r'specialites', SpecialiteViewSet, basename='specialite')\nrouter.register(r'annees-scolaires', AnneeScolaireViewSet, basename='annees-scolaires')\nurlpatterns = [\n    path('', include(router.urls)),\n    path('institutions/create/', InstitutionCreateAPIView.as_view(), name='institution-create'),\n    path('filieres/', FiliereListCreateAPIView.as_view(), name='filiere-list-create'),\n    path('filieres/<int:pk>/', FiliereDetailAPIView.as_view(), name='filiere-detail'),",
        "detail": "academics.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "academics.urls",
        "description": "academics.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n    path('institutions/create/', InstitutionCreateAPIView.as_view(), name='institution-create'),\n    path('filieres/', FiliereListCreateAPIView.as_view(), name='filiere-list-create'),\n    path('filieres/<int:pk>/', FiliereDetailAPIView.as_view(), name='filiere-detail'),\n    path('groupes/', GroupeListCreateAPIView.as_view(), name='groupe-list-create'),\n    path('groupes/<int:pk>/', GroupeDetailAPIView.as_view(), name='groupe-detail'),\n    path('classes/', ClasseListCreateAPIView.as_view(), name='classe-list-create'),\n    path('classes/<int:pk>/', ClasseDetailAPIView.as_view(), name='classe-detail'),\n    path('api/inscriptions/', InscriptionListCreateAPIView.as_view(), name='inscription-list-create'),",
        "detail": "academics.urls",
        "documentation": {}
    },
    {
        "label": "InstitutionCreateAPIView",
        "kind": 6,
        "importPath": "academics.views",
        "description": "academics.views",
        "peekOfCode": "class InstitutionCreateAPIView(APIView):\n    def post(self, request, *args, **kwargs):\n        serializer = InstitutionSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\nclass DomaineEtudeViewSet(viewsets.ModelViewSet):\n    queryset = DomaineEtude.objects.all()\n    serializer_class = DomaineEtudeSerializer",
        "detail": "academics.views",
        "documentation": {}
    },
    {
        "label": "DomaineEtudeViewSet",
        "kind": 6,
        "importPath": "academics.views",
        "description": "academics.views",
        "peekOfCode": "class DomaineEtudeViewSet(viewsets.ModelViewSet):\n    queryset = DomaineEtude.objects.all()\n    serializer_class = DomaineEtudeSerializer\nclass MatiereViewSet(viewsets.ModelViewSet):\n    queryset = Matiere.objects.all()\n    serializer_class = MatiereSerializer\nclass SpecialiteViewSet(viewsets.ModelViewSet):\n    queryset = Specialite.objects.all()\n    serializer_class = SpecialiteSerializer\nclass AnneeScolaireViewSet(viewsets.ModelViewSet):",
        "detail": "academics.views",
        "documentation": {}
    },
    {
        "label": "MatiereViewSet",
        "kind": 6,
        "importPath": "academics.views",
        "description": "academics.views",
        "peekOfCode": "class MatiereViewSet(viewsets.ModelViewSet):\n    queryset = Matiere.objects.all()\n    serializer_class = MatiereSerializer\nclass SpecialiteViewSet(viewsets.ModelViewSet):\n    queryset = Specialite.objects.all()\n    serializer_class = SpecialiteSerializer\nclass AnneeScolaireViewSet(viewsets.ModelViewSet):\n    queryset = AnneeScolaire.objects.all()\n    serializer_class = AnneeScolaireSerializer\nclass FiliereListCreateAPIView(APIView):",
        "detail": "academics.views",
        "documentation": {}
    },
    {
        "label": "SpecialiteViewSet",
        "kind": 6,
        "importPath": "academics.views",
        "description": "academics.views",
        "peekOfCode": "class SpecialiteViewSet(viewsets.ModelViewSet):\n    queryset = Specialite.objects.all()\n    serializer_class = SpecialiteSerializer\nclass AnneeScolaireViewSet(viewsets.ModelViewSet):\n    queryset = AnneeScolaire.objects.all()\n    serializer_class = AnneeScolaireSerializer\nclass FiliereListCreateAPIView(APIView):\n    def get(self, request):\n        filieres = Filiere.objects.all()\n        serializer = FiliereSerializer(filieres, many=True)",
        "detail": "academics.views",
        "documentation": {}
    },
    {
        "label": "AnneeScolaireViewSet",
        "kind": 6,
        "importPath": "academics.views",
        "description": "academics.views",
        "peekOfCode": "class AnneeScolaireViewSet(viewsets.ModelViewSet):\n    queryset = AnneeScolaire.objects.all()\n    serializer_class = AnneeScolaireSerializer\nclass FiliereListCreateAPIView(APIView):\n    def get(self, request):\n        filieres = Filiere.objects.all()\n        serializer = FiliereSerializer(filieres, many=True)\n        return Response(serializer.data)\n    def post(self, request):\n        serializer = FiliereSerializer(data=request.data)",
        "detail": "academics.views",
        "documentation": {}
    },
    {
        "label": "FiliereListCreateAPIView",
        "kind": 6,
        "importPath": "academics.views",
        "description": "academics.views",
        "peekOfCode": "class FiliereListCreateAPIView(APIView):\n    def get(self, request):\n        filieres = Filiere.objects.all()\n        serializer = FiliereSerializer(filieres, many=True)\n        return Response(serializer.data)\n    def post(self, request):\n        serializer = FiliereSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "academics.views",
        "documentation": {}
    },
    {
        "label": "FiliereDetailAPIView",
        "kind": 6,
        "importPath": "academics.views",
        "description": "academics.views",
        "peekOfCode": "class FiliereDetailAPIView(APIView):\n    def get_object(self, pk):\n        try:\n            return Filiere.objects.get(pk=pk)\n        except Filiere.DoesNotExist:\n            return None\n    def get(self, request, pk):\n        filiere = self.get_object(pk)\n        if filiere:\n            serializer = FiliereSerializer(filiere)",
        "detail": "academics.views",
        "documentation": {}
    },
    {
        "label": "GroupeListCreateAPIView",
        "kind": 6,
        "importPath": "academics.views",
        "description": "academics.views",
        "peekOfCode": "class GroupeListCreateAPIView(APIView):\n    def get(self, request):\n        groupes = Groupe.objects.all()\n        serializer = GroupeSerializer(groupes, many=True)\n        return Response(serializer.data)\n    def post(self, request):\n        serializer = GroupeSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "academics.views",
        "documentation": {}
    },
    {
        "label": "GroupeDetailAPIView",
        "kind": 6,
        "importPath": "academics.views",
        "description": "academics.views",
        "peekOfCode": "class GroupeDetailAPIView(APIView):\n    def get_object(self, pk):\n        try:\n            return Groupe.objects.get(pk=pk)\n        except Groupe.DoesNotExist:\n            return None\n    def get(self, request, pk):\n        groupe = self.get_object(pk)\n        if groupe:\n            serializer = GroupeSerializer(groupe)",
        "detail": "academics.views",
        "documentation": {}
    },
    {
        "label": "ClasseListCreateAPIView",
        "kind": 6,
        "importPath": "academics.views",
        "description": "academics.views",
        "peekOfCode": "class ClasseListCreateAPIView(APIView):\n    def get(self, request):\n        classes = Classe.objects.all()\n        serializer = ClasseSerializer(classes, many=True)\n        return Response(serializer.data)\n    def post(self, request):\n        serializer = ClasseSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "academics.views",
        "documentation": {}
    },
    {
        "label": "ClasseDetailAPIView",
        "kind": 6,
        "importPath": "academics.views",
        "description": "academics.views",
        "peekOfCode": "class ClasseDetailAPIView(APIView):\n    def get_object(self, pk):\n        try:\n            return Classe.objects.get(pk=pk)\n        except Classe.DoesNotExist:\n            return None\n    def get(self, request, pk):\n        classe = self.get_object(pk)\n        if classe:\n            serializer = ClasseSerializer(classe)",
        "detail": "academics.views",
        "documentation": {}
    },
    {
        "label": "InscriptionListCreateAPIView",
        "kind": 6,
        "importPath": "academics.views",
        "description": "academics.views",
        "peekOfCode": "class InscriptionListCreateAPIView(APIView):\n    def get(self, request):\n        inscriptions = Inscription.objects.all()\n        serializer = InscriptionSerializer(inscriptions, many=True)\n        return Response(serializer.data)\n    def post(self, request):\n        serializer = InscriptionSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "academics.views",
        "documentation": {}
    },
    {
        "label": "InscriptionDetailAPIView",
        "kind": 6,
        "importPath": "academics.views",
        "description": "academics.views",
        "peekOfCode": "class InscriptionDetailAPIView(APIView):\n    def get_object(self, pk):\n        try:\n            return Inscription.objects.get(pk=pk)\n        except Inscription.DoesNotExist:\n            return None\n    def get(self, request, pk):\n        inscription = self.get_object(pk)\n        if inscription:\n            serializer = InscriptionSerializer(inscription)",
        "detail": "academics.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "collaborations.migrations.0001_initial",
        "description": "collaborations.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Commentaire',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('contenu', models.TextField()),",
        "detail": "collaborations.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "collaborations.migrations.0002_initial",
        "description": "collaborations.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('collaborations', '0001_initial'),\n        ('courses', '0001_initial'),\n        ('users', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='commentaire',",
        "detail": "collaborations.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "CollaborationsConfig",
        "kind": 6,
        "importPath": "collaborations.apps",
        "description": "collaborations.apps",
        "peekOfCode": "class CollaborationsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'collaborations'",
        "detail": "collaborations.apps",
        "documentation": {}
    },
    {
        "label": "Conversation",
        "kind": 6,
        "importPath": "collaborations.models",
        "description": "collaborations.models",
        "peekOfCode": "class Conversation(models.Model):\n    sujet = models.CharField(max_length=255, blank=True, null=True)  # Facultatif, sujet de la conversation\n    date_creation = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"Conversation {self.id} - Sujet: {self.sujet or 'Sans sujet'}\"\nclass Participant(models.Model):\n    user = models.ForeignKey('users.User', on_delete=models.CASCADE, related_name=\"conversations\")\n    conversation = models.ForeignKey(Conversation, on_delete=models.CASCADE, related_name=\"participants\")\n    date_rejoint = models.DateTimeField(auto_now_add=True)\n    dernier_message_lu = models.DateTimeField(blank=True, null=True)  # Pour le suivi des messages non lus",
        "detail": "collaborations.models",
        "documentation": {}
    },
    {
        "label": "Participant",
        "kind": 6,
        "importPath": "collaborations.models",
        "description": "collaborations.models",
        "peekOfCode": "class Participant(models.Model):\n    user = models.ForeignKey('users.User', on_delete=models.CASCADE, related_name=\"conversations\")\n    conversation = models.ForeignKey(Conversation, on_delete=models.CASCADE, related_name=\"participants\")\n    date_rejoint = models.DateTimeField(auto_now_add=True)\n    dernier_message_lu = models.DateTimeField(blank=True, null=True)  # Pour le suivi des messages non lus\n    class Meta:\n        unique_together = (\n        'user', 'conversation')  # Un utilisateur ne peut participer qu'une fois par conversation\n    def __str__(self):\n        return f\"{self.user.username} - {self.conversation}\"",
        "detail": "collaborations.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "collaborations.models",
        "description": "collaborations.models",
        "peekOfCode": "class Message(models.Model):\n    conversation = models.ForeignKey(Conversation, on_delete=models.CASCADE, related_name=\"messages\")\n    envoyeur = models.ForeignKey('users.User', on_delete=models.CASCADE, related_name=\"messages_envoyes\")\n    contenu = models.TextField()  # Contenu du message\n    date_envoi = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"Message de {self.envoyeur.username} - Conversation {self.conversation.id}\"\nclass Forum(models.Model):\n    titre = models.CharField(max_length=255)\n    description = models.TextField()",
        "detail": "collaborations.models",
        "documentation": {}
    },
    {
        "label": "Forum",
        "kind": 6,
        "importPath": "collaborations.models",
        "description": "collaborations.models",
        "peekOfCode": "class Forum(models.Model):\n    titre = models.CharField(max_length=255)\n    description = models.TextField()\n    cours = models.ForeignKey('courses.Cours', on_delete=models.CASCADE, related_name='forums', null=True, blank=True)\n    sequence = models.ForeignKey('courses.Sequence', on_delete=models.CASCADE, related_name='forums', null=True, blank=True)\n    module = models.ForeignKey('courses.Module', on_delete=models.CASCADE, related_name='forums', null=True, blank=True)\n    auteur = models.ForeignKey('users.User', on_delete=models.CASCADE, related_name='forums')\n    date_creation = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return self.titre",
        "detail": "collaborations.models",
        "documentation": {}
    },
    {
        "label": "Commentaire",
        "kind": 6,
        "importPath": "collaborations.models",
        "description": "collaborations.models",
        "peekOfCode": "class Commentaire(models.Model):\n    forum = models.ForeignKey(Forum, on_delete=models.CASCADE, related_name='commentaires')\n    auteur = models.ForeignKey('users.User', on_delete=models.CASCADE, related_name='commentaires')\n    contenu = models.TextField()\n    date_creation = models.DateTimeField(auto_now_add=True)\n    parent = models.ForeignKey('self', on_delete=models.CASCADE, related_name='reponses', null=True, blank=True)\n    def __str__(self):\n        return f\"Commentaire de {self.auteur.username} sur {self.forum.titre}\"",
        "detail": "collaborations.models",
        "documentation": {}
    },
    {
        "label": "ConversationSerializer",
        "kind": 6,
        "importPath": "collaborations.serializers",
        "description": "collaborations.serializers",
        "peekOfCode": "class ConversationSerializer(serializers.ModelSerializer):\n    participants = serializers.StringRelatedField(many=True)  # Nom des participants\n    messages = serializers.StringRelatedField(many=True)  # Identifiant des messages\n    class Meta:\n        model = Conversation\n        fields = ['id', 'sujet', 'date_creation', 'participants', 'messages']\nclass ParticipantSerializer(serializers.ModelSerializer):\n    user = serializers.StringRelatedField()  # Nom d'utilisateur du participant\n    conversation = ConversationSerializer()  # Sérialiser la conversation associée\n    class Meta:",
        "detail": "collaborations.serializers",
        "documentation": {}
    },
    {
        "label": "ParticipantSerializer",
        "kind": 6,
        "importPath": "collaborations.serializers",
        "description": "collaborations.serializers",
        "peekOfCode": "class ParticipantSerializer(serializers.ModelSerializer):\n    user = serializers.StringRelatedField()  # Nom d'utilisateur du participant\n    conversation = ConversationSerializer()  # Sérialiser la conversation associée\n    class Meta:\n        model = Participant\n        fields = ['user', 'conversation', 'date_rejoint', 'dernier_message_lu']\nclass MessageSerializer(serializers.ModelSerializer):\n    envoyeur = serializers.StringRelatedField()  # Nom de l'envoyeur du message\n    conversation = ConversationSerializer()  # Sérialiser la conversation associée\n    class Meta:",
        "detail": "collaborations.serializers",
        "documentation": {}
    },
    {
        "label": "MessageSerializer",
        "kind": 6,
        "importPath": "collaborations.serializers",
        "description": "collaborations.serializers",
        "peekOfCode": "class MessageSerializer(serializers.ModelSerializer):\n    envoyeur = serializers.StringRelatedField()  # Nom de l'envoyeur du message\n    conversation = ConversationSerializer()  # Sérialiser la conversation associée\n    class Meta:\n        model = Message\n        fields = ['id', 'conversation', 'envoyeur', 'contenu', 'date_envoi']\nclass ForumSerializer(serializers.ModelSerializer):\n    cours = serializers.StringRelatedField()  # Affiche le titre du cours\n    sequence = serializers.StringRelatedField()  # Affiche le titre de la séquence\n    module = serializers.StringRelatedField()  # Affiche le titre du module",
        "detail": "collaborations.serializers",
        "documentation": {}
    },
    {
        "label": "ForumSerializer",
        "kind": 6,
        "importPath": "collaborations.serializers",
        "description": "collaborations.serializers",
        "peekOfCode": "class ForumSerializer(serializers.ModelSerializer):\n    cours = serializers.StringRelatedField()  # Affiche le titre du cours\n    sequence = serializers.StringRelatedField()  # Affiche le titre de la séquence\n    module = serializers.StringRelatedField()  # Affiche le titre du module\n    auteur = serializers.StringRelatedField()  # Affiche le nom de l'auteur du forum\n    class Meta:\n        model = Forum\n        fields = ['id', 'titre', 'description', 'cours', 'sequence', 'module', 'auteur', 'date_creation']\nclass CommentaireSerializer(serializers.ModelSerializer):\n    auteur = serializers.StringRelatedField()  # Nom de l'auteur du commentaire",
        "detail": "collaborations.serializers",
        "documentation": {}
    },
    {
        "label": "CommentaireSerializer",
        "kind": 6,
        "importPath": "collaborations.serializers",
        "description": "collaborations.serializers",
        "peekOfCode": "class CommentaireSerializer(serializers.ModelSerializer):\n    auteur = serializers.StringRelatedField()  # Nom de l'auteur du commentaire\n    forum = ForumSerializer()  # Sérialiser le forum associé\n    parent = serializers.StringRelatedField()  # ID du commentaire parent, s'il existe\n    class Meta:\n        model = Commentaire\n        fields = ['id', 'forum', 'auteur', 'contenu', 'date_creation', 'parent']",
        "detail": "collaborations.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "collaborations.urls",
        "description": "collaborations.urls",
        "peekOfCode": "urlpatterns = [\n    # Conversations\n    path('conversations/', ConversationListView.as_view(), name='conversation-list'),\n    path('conversations/<int:pk>/', ConversationDetailView.as_view(), name='conversation-detail'),\n    # Participants\n    path('participants/', ParticipantListView.as_view(), name='participant-list'),\n    path('participants/<int:pk>/', ParticipantDetailView.as_view(), name='participant-detail'),\n    # Messages globaux\n    path('messages/', MessageListView.as_view(), name='message-list'),\n    path('messages/<int:pk>/', MessageDetailView.as_view(), name='message-detail'),",
        "detail": "collaborations.urls",
        "documentation": {}
    },
    {
        "label": "ConversationListView",
        "kind": 6,
        "importPath": "collaborations.views",
        "description": "collaborations.views",
        "peekOfCode": "class ConversationListView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request, format=None):\n        conversations = Conversation.objects.all()\n        serializer = ConversationSerializer(conversations, many=True)\n        return Response(serializer.data)\n    def post(self, request, format=None):\n        serializer = ConversationSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()",
        "detail": "collaborations.views",
        "documentation": {}
    },
    {
        "label": "ConversationDetailView",
        "kind": 6,
        "importPath": "collaborations.views",
        "description": "collaborations.views",
        "peekOfCode": "class ConversationDetailView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get_object(self, pk):\n        try:\n            return Conversation.objects.get(pk=pk)\n        except Conversation.DoesNotExist:\n            return None\n    def get(self, request, pk, format=None):\n        conversation = self.get_object(pk)\n        if conversation is None:",
        "detail": "collaborations.views",
        "documentation": {}
    },
    {
        "label": "ParticipantListView",
        "kind": 6,
        "importPath": "collaborations.views",
        "description": "collaborations.views",
        "peekOfCode": "class ParticipantListView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request, format=None):\n        participants = Participant.objects.all()\n        serializer = ParticipantSerializer(participants, many=True)\n        return Response(serializer.data)\n    def post(self, request, format=None):\n        serializer = ParticipantSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()",
        "detail": "collaborations.views",
        "documentation": {}
    },
    {
        "label": "ParticipantDetailView",
        "kind": 6,
        "importPath": "collaborations.views",
        "description": "collaborations.views",
        "peekOfCode": "class ParticipantDetailView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get_object(self, pk):\n        try:\n            return Participant.objects.get(pk=pk)\n        except Participant.DoesNotExist:\n            return None\n    def get(self, request, pk, format=None):\n        participant = self.get_object(pk)\n        if participant is None:",
        "detail": "collaborations.views",
        "documentation": {}
    },
    {
        "label": "MessageListView",
        "kind": 6,
        "importPath": "collaborations.views",
        "description": "collaborations.views",
        "peekOfCode": "class MessageListView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request, format=None):\n        messages = Message.objects.all()\n        serializer = MessageSerializer(messages, many=True)\n        return Response(serializer.data)\n    def post(self, request, format=None):\n        serializer = MessageSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()",
        "detail": "collaborations.views",
        "documentation": {}
    },
    {
        "label": "MessageDetailView",
        "kind": 6,
        "importPath": "collaborations.views",
        "description": "collaborations.views",
        "peekOfCode": "class MessageDetailView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get_object(self, pk):\n        try:\n            return Message.objects.get(pk=pk)\n        except Message.DoesNotExist:\n            return None\n    def get(self, request, pk, format=None):\n        message = self.get_object(pk)\n        if message is None:",
        "detail": "collaborations.views",
        "documentation": {}
    },
    {
        "label": "ForumListView",
        "kind": 6,
        "importPath": "collaborations.views",
        "description": "collaborations.views",
        "peekOfCode": "class ForumListView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request, format=None):\n        forums = Forum.objects.all()\n        serializer = ForumSerializer(forums, many=True)\n        return Response(serializer.data)\n    def post(self, request, format=None):\n        serializer = ForumSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()",
        "detail": "collaborations.views",
        "documentation": {}
    },
    {
        "label": "ForumDetailView",
        "kind": 6,
        "importPath": "collaborations.views",
        "description": "collaborations.views",
        "peekOfCode": "class ForumDetailView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get_object(self, pk):\n        try:\n            return Forum.objects.get(pk=pk)\n        except Forum.DoesNotExist:\n            return None\n    def get(self, request, pk, format=None):\n        forum = self.get_object(pk)\n        if forum is None:",
        "detail": "collaborations.views",
        "documentation": {}
    },
    {
        "label": "CommentaireListView",
        "kind": 6,
        "importPath": "collaborations.views",
        "description": "collaborations.views",
        "peekOfCode": "class CommentaireListView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request, format=None):\n        commentaires = Commentaire.objects.all()\n        serializer = CommentaireSerializer(commentaires, many=True)\n        return Response(serializer.data)\n    def post(self, request, format=None):\n        serializer = CommentaireSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()",
        "detail": "collaborations.views",
        "documentation": {}
    },
    {
        "label": "CommentaireDetailView",
        "kind": 6,
        "importPath": "collaborations.views",
        "description": "collaborations.views",
        "peekOfCode": "class CommentaireDetailView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get_object(self, pk):\n        try:\n            return Commentaire.objects.get(pk=pk)\n        except Commentaire.DoesNotExist:\n            return None\n    def get(self, request, pk, format=None):\n        commentaire = self.get_object(pk)\n        if commentaire is None:",
        "detail": "collaborations.views",
        "documentation": {}
    },
    {
        "label": "MessageByConversationView",
        "kind": 6,
        "importPath": "collaborations.views",
        "description": "collaborations.views",
        "peekOfCode": "class MessageByConversationView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request, conversation_id, format=None):\n        conversation = get_object_or_404(Conversation, id=conversation_id)\n        messages = Message.objects.filter(conversation=conversation)\n        serializer = MessageSerializer(messages, many=True)\n        return Response(serializer.data)\n    def post(self, request, conversation_id, format=None):\n        conversation = get_object_or_404(Conversation, id=conversation_id)\n        data = request.data",
        "detail": "collaborations.views",
        "documentation": {}
    },
    {
        "label": "CommentaireByForumView",
        "kind": 6,
        "importPath": "collaborations.views",
        "description": "collaborations.views",
        "peekOfCode": "class CommentaireByForumView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request, forum_id, format=None):\n        forum = get_object_or_404(Forum, id=forum_id)\n        commentaires = Commentaire.objects.filter(forum=forum)\n        serializer = CommentaireSerializer(commentaires, many=True)\n        return Response(serializer.data)\n    def post(self, request, forum_id, format=None):\n        forum = get_object_or_404(Forum, id=forum_id)\n        data = request.data",
        "detail": "collaborations.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "courses.migrations.0001_initial",
        "description": "courses.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Cours',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('date', models.DateField(blank=True, null=True)),",
        "detail": "courses.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "courses.migrations.0002_initial",
        "description": "courses.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('academics', '0002_initial'),\n        ('courses', '0001_initial'),\n        ('users', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='cours',",
        "detail": "courses.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "CoursesConfig",
        "kind": 6,
        "importPath": "courses.apps",
        "description": "courses.apps",
        "peekOfCode": "class CoursesConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'courses'",
        "detail": "courses.apps",
        "documentation": {}
    },
    {
        "label": "Cours",
        "kind": 6,
        "importPath": "courses.models",
        "description": "courses.models",
        "peekOfCode": "class Cours(models.Model):\n    groupe = models.ForeignKey(Groupe, on_delete=models.CASCADE)\n    enseignant = models.ForeignKey('users.Formateur', on_delete=models.CASCADE)\n    matiere = models.ForeignKey(Matiere, on_delete=models.CASCADE)\n    date = models.DateField(null=True, blank=True)\n    heure = models.TimeField(null=True, blank=True)\n    def __str__(self):\n        return f\"Cours de {self.matiere} par {self.enseignant} dans {self.groupe}\"\nclass Sequence(models.Model):\n    titre = models.CharField(max_length=255)",
        "detail": "courses.models",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "kind": 6,
        "importPath": "courses.models",
        "description": "courses.models",
        "peekOfCode": "class Sequence(models.Model):\n    titre = models.CharField(max_length=255)\n    module = models.ForeignKey('Module', on_delete=models.CASCADE, related_name='sequences')\n    def __str__(self):\n        return self.titre\nclass Module(models.Model):\n    titre = models.CharField(max_length=255)\n    description = models.TextField()\n    cours = models.ForeignKey(Cours, on_delete=models.CASCADE, related_name='modules')\n    def __str__(self):",
        "detail": "courses.models",
        "documentation": {}
    },
    {
        "label": "Module",
        "kind": 6,
        "importPath": "courses.models",
        "description": "courses.models",
        "peekOfCode": "class Module(models.Model):\n    titre = models.CharField(max_length=255)\n    description = models.TextField()\n    cours = models.ForeignKey(Cours, on_delete=models.CASCADE, related_name='modules')\n    def __str__(self):\n        return self.titre\nclass InscriptionCours(models.Model):\n    apprenant = models.ForeignKey('users.Apprenant', on_delete=models.CASCADE, related_name='inscriptions')\n    cours = models.ForeignKey(Cours, on_delete=models.CASCADE, related_name='inscriptions')\n    date_inscription = models.DateField(auto_now_add=True)",
        "detail": "courses.models",
        "documentation": {}
    },
    {
        "label": "InscriptionCours",
        "kind": 6,
        "importPath": "courses.models",
        "description": "courses.models",
        "peekOfCode": "class InscriptionCours(models.Model):\n    apprenant = models.ForeignKey('users.Apprenant', on_delete=models.CASCADE, related_name='inscriptions')\n    cours = models.ForeignKey(Cours, on_delete=models.CASCADE, related_name='inscriptions')\n    date_inscription = models.DateField(auto_now_add=True)\n    statut = models.CharField(max_length=50)  # Par exemple : 'en cours', 'complété', etc.\n    def __str__(self):\n        return f\"{self.apprenant.nom} inscrit à {self.cours.nom}\"\nclass Suivi(models.Model):\n    apprenant = models.ForeignKey('users.Apprenant', on_delete=models.CASCADE, related_name='suivis')\n    cours = models.ForeignKey(Cours, on_delete=models.CASCADE, related_name='suivis')",
        "detail": "courses.models",
        "documentation": {}
    },
    {
        "label": "Suivi",
        "kind": 6,
        "importPath": "courses.models",
        "description": "courses.models",
        "peekOfCode": "class Suivi(models.Model):\n    apprenant = models.ForeignKey('users.Apprenant', on_delete=models.CASCADE, related_name='suivis')\n    cours = models.ForeignKey(Cours, on_delete=models.CASCADE, related_name='suivis')\n    date_debut = models.DateField(auto_now_add=True)\n    progression = models.FloatField(default=0.0)  # Progrès en pourcentage (0.0 à 100.0)\n    note = models.FloatField(null=True, blank=True)  # Note de l'apprenant, si applicable\n    commentaires = models.TextField(null=True, blank=True)  # Commentaires ou retours sur le suivi\n    def __str__(self):\n        return f\"Suivi de {self.apprenant.nom} pour {self.cours.nom}\"\n    def save(self, *args, **kwargs):",
        "detail": "courses.models",
        "documentation": {}
    },
    {
        "label": "Session",
        "kind": 6,
        "importPath": "courses.models",
        "description": "courses.models",
        "peekOfCode": "class Session(models.Model):\n    titre = models.CharField(max_length=255)\n    date_debut = models.DateTimeField()\n    date_fin = models.DateTimeField()\n    cours = models.ForeignKey('Cours', on_delete=models.CASCADE,\n                              related_name='sessions')  # Supposons que vous ayez déjà un modèle Cours\n    formateur = models.ForeignKey('users.Formateur', on_delete=models.CASCADE,\n                                  related_name='sessions')  # Formateur pour la session\n    def __str__(self):\n        return f\"{self.titre} ({self.date_debut} - {self.date_fin})\"",
        "detail": "courses.models",
        "documentation": {}
    },
    {
        "label": "Participation",
        "kind": 6,
        "importPath": "courses.models",
        "description": "courses.models",
        "peekOfCode": "class Participation(models.Model):\n    session = models.ForeignKey(Session, on_delete=models.CASCADE, related_name='participations')\n    apprenant = models.ForeignKey('users.Apprenant', on_delete=models.CASCADE,\n                                  related_name='participations')  # On suppose que User représente les apprenants\n    date_participation = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        unique_together = (\n            'session', 'apprenant')  # Assurer qu'un apprenant ne peut pas participer à la même session plusieurs fois\n    def __str__(self):\n        return f\"{self.apprenant.username} participe à {self.session.titre}\"",
        "detail": "courses.models",
        "documentation": {}
    },
    {
        "label": "CoursSerializer",
        "kind": 6,
        "importPath": "courses.serializers",
        "description": "courses.serializers",
        "peekOfCode": "class CoursSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Cours\n        fields = ['id', 'nom', 'description']  # Ajouter les champs de votre modèle Cours\nclass ModuleSerializer(serializers.ModelSerializer):\n    cours = CoursSerializer()\n    class Meta:\n        model = Module\n        fields = ['id', 'titre', 'description', 'cours']\nclass SequenceSerializer(serializers.ModelSerializer):",
        "detail": "courses.serializers",
        "documentation": {}
    },
    {
        "label": "ModuleSerializer",
        "kind": 6,
        "importPath": "courses.serializers",
        "description": "courses.serializers",
        "peekOfCode": "class ModuleSerializer(serializers.ModelSerializer):\n    cours = CoursSerializer()\n    class Meta:\n        model = Module\n        fields = ['id', 'titre', 'description', 'cours']\nclass SequenceSerializer(serializers.ModelSerializer):\n    # Sérialiser l'attribut module lié (clé étrangère)\n    module = ModuleSerializer()  # Utilisation d'un serializer imbriqué pour 'module'\n    class Meta:\n        model = Sequence",
        "detail": "courses.serializers",
        "documentation": {}
    },
    {
        "label": "SequenceSerializer",
        "kind": 6,
        "importPath": "courses.serializers",
        "description": "courses.serializers",
        "peekOfCode": "class SequenceSerializer(serializers.ModelSerializer):\n    # Sérialiser l'attribut module lié (clé étrangère)\n    module = ModuleSerializer()  # Utilisation d'un serializer imbriqué pour 'module'\n    class Meta:\n        model = Sequence\n        fields = ['id', 'titre', 'module']\nclass InscriptionCoursSerializer(serializers.ModelSerializer):\n    # Sérialiser les relations apprenant et cours avec des serializers imbriqués\n    apprenant = ApprenantSerializer()\n    cours = CoursSerializer()",
        "detail": "courses.serializers",
        "documentation": {}
    },
    {
        "label": "InscriptionCoursSerializer",
        "kind": 6,
        "importPath": "courses.serializers",
        "description": "courses.serializers",
        "peekOfCode": "class InscriptionCoursSerializer(serializers.ModelSerializer):\n    # Sérialiser les relations apprenant et cours avec des serializers imbriqués\n    apprenant = ApprenantSerializer()\n    cours = CoursSerializer()\n    class Meta:\n        model = InscriptionCours\n        fields = ['id', 'apprenant', 'cours', 'date_inscription', 'statut']\nclass SuiviSerializer(serializers.ModelSerializer):\n    apprenant = ApprenantSerializer()\n    cours = CoursSerializer()",
        "detail": "courses.serializers",
        "documentation": {}
    },
    {
        "label": "SuiviSerializer",
        "kind": 6,
        "importPath": "courses.serializers",
        "description": "courses.serializers",
        "peekOfCode": "class SuiviSerializer(serializers.ModelSerializer):\n    apprenant = ApprenantSerializer()\n    cours = CoursSerializer()\n    class Meta:\n        model = Suivi\n        fields = ['id', 'apprenant', 'cours', 'date_debut', 'progression', 'note', 'commentaires']\nclass SessionSerializer(serializers.ModelSerializer):\n    formateur = FormateurSerializer()\n    cours = CoursSerializer()\n    class Meta:",
        "detail": "courses.serializers",
        "documentation": {}
    },
    {
        "label": "SessionSerializer",
        "kind": 6,
        "importPath": "courses.serializers",
        "description": "courses.serializers",
        "peekOfCode": "class SessionSerializer(serializers.ModelSerializer):\n    formateur = FormateurSerializer()\n    cours = CoursSerializer()\n    class Meta:\n        model = Session\n        fields = ['id', 'titre', 'date_debut', 'date_fin', 'formateur', 'cours']\nclass ParticipationSerializer(serializers.ModelSerializer):\n    session = SessionSerializer()  # Sérialiser la session liée\n    apprenant = ApprenantSerializer()  # Sérialiser l'apprenant lié\n    class Meta:",
        "detail": "courses.serializers",
        "documentation": {}
    },
    {
        "label": "ParticipationSerializer",
        "kind": 6,
        "importPath": "courses.serializers",
        "description": "courses.serializers",
        "peekOfCode": "class ParticipationSerializer(serializers.ModelSerializer):\n    session = SessionSerializer()  # Sérialiser la session liée\n    apprenant = ApprenantSerializer()  # Sérialiser l'apprenant lié\n    class Meta:\n        model = Participation\n        fields = ['id', 'session', 'apprenant', 'date_participation']",
        "detail": "courses.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "courses.urls",
        "description": "courses.urls",
        "peekOfCode": "urlpatterns = [\n    path('sequences/', SequenceListCreateAPIView.as_view(), name='sequence-list-create'),\n    path('modules/', ModuleListCreateAPIView.as_view(), name='module-list-create'),\n    path('inscriptions-cours/', InscriptionCoursListCreateAPIView.as_view(), name='inscription-cours-list-create'),\n    path('suivis/', SuiviListCreateAPIView.as_view(), name='suivi-list-create'),\n    path('sessions/', SessionListCreateAPIView.as_view(), name='session-list-create'),\n    path('participations/', ParticipationListCreateAPIView.as_view(), name='participation-list-create'),\n]",
        "detail": "courses.urls",
        "documentation": {}
    },
    {
        "label": "SequenceListCreateAPIView",
        "kind": 6,
        "importPath": "courses.views",
        "description": "courses.views",
        "peekOfCode": "class SequenceListCreateAPIView(APIView):\n    def get(self, request):\n        sequences = Sequence.objects.all()\n        serializer = SequenceSerializer(sequences, many=True)\n        return Response(serializer.data)\n    def post(self, request):\n        serializer = SequenceSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "courses.views",
        "documentation": {}
    },
    {
        "label": "ModuleListCreateAPIView",
        "kind": 6,
        "importPath": "courses.views",
        "description": "courses.views",
        "peekOfCode": "class ModuleListCreateAPIView(APIView):\n    def get(self, request):\n        modules = Module.objects.all()\n        serializer = ModuleSerializer(modules, many=True)\n        return Response(serializer.data)\n    def post(self, request):\n        serializer = ModuleSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "courses.views",
        "documentation": {}
    },
    {
        "label": "InscriptionCoursListCreateAPIView",
        "kind": 6,
        "importPath": "courses.views",
        "description": "courses.views",
        "peekOfCode": "class InscriptionCoursListCreateAPIView(APIView):\n    def get(self, request):\n        inscriptions = InscriptionCours.objects.all()\n        serializer = InscriptionCoursSerializer(inscriptions, many=True)\n        return Response(serializer.data)\n    def post(self, request):\n        serializer = InscriptionCoursSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "courses.views",
        "documentation": {}
    },
    {
        "label": "SuiviListCreateAPIView",
        "kind": 6,
        "importPath": "courses.views",
        "description": "courses.views",
        "peekOfCode": "class SuiviListCreateAPIView(APIView):\n    def get(self, request):\n        suivis = Suivi.objects.all()\n        serializer = SuiviSerializer(suivis, many=True)\n        return Response(serializer.data)\n    def post(self, request):\n        serializer = SuiviSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "courses.views",
        "documentation": {}
    },
    {
        "label": "SessionListCreateAPIView",
        "kind": 6,
        "importPath": "courses.views",
        "description": "courses.views",
        "peekOfCode": "class SessionListCreateAPIView(APIView):\n    def get(self, request):\n        sessions = Session.objects.all()\n        serializer = SessionSerializer(sessions, many=True)\n        return Response(serializer.data)\n    def post(self, request):\n        serializer = SessionSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "courses.views",
        "documentation": {}
    },
    {
        "label": "ParticipationListCreateAPIView",
        "kind": 6,
        "importPath": "courses.views",
        "description": "courses.views",
        "peekOfCode": "class ParticipationListCreateAPIView(APIView):\n    def get(self, request):\n        participations = Participation.objects.all()\n        serializer = ParticipationSerializer(participations, many=True)\n        return Response(serializer.data)\n    def post(self, request):\n        serializer = ParticipationSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "courses.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "evaluations.migrations.0001_initial",
        "description": "evaluations.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ApprenantEvaluation',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('note', models.FloatField()),",
        "detail": "evaluations.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "evaluations.migrations.0002_initial",
        "description": "evaluations.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('courses', '0002_initial'),\n        ('evaluations', '0001_initial'),\n        ('users', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='apprenantevaluation',",
        "detail": "evaluations.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "EvaluationsConfig",
        "kind": 6,
        "importPath": "evaluations.apps",
        "description": "evaluations.apps",
        "peekOfCode": "class EvaluationsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'evaluations'",
        "detail": "evaluations.apps",
        "documentation": {}
    },
    {
        "label": "Quiz",
        "kind": 6,
        "importPath": "evaluations.models",
        "description": "evaluations.models",
        "peekOfCode": "class Quiz(models.Model):\n    titre = models.CharField(max_length=255)\n    sequence = models.ForeignKey(Sequence, on_delete=models.CASCADE, related_name='quizz')\n    date_creation = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"Quiz: {self.titre} (Sequence: {self.sequence.titre})\"\nclass Question(models.Model):\n    TYPE_CHOICES = [\n        ('texte', 'Texte à rédiger'),\n        ('choix_unique', 'Choix unique'),",
        "detail": "evaluations.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "kind": 6,
        "importPath": "evaluations.models",
        "description": "evaluations.models",
        "peekOfCode": "class Question(models.Model):\n    TYPE_CHOICES = [\n        ('texte', 'Texte à rédiger'),\n        ('choix_unique', 'Choix unique'),\n        ('choix_multiple', 'Choix multiple'),\n    ]\n    texte = models.TextField()\n    quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE, related_name='questions_quizz', null=True, blank=True)\n    evaluation = models.ForeignKey(\n        'Evaluation', on_delete=models.CASCADE, related_name='questions_evaluation', null=True, blank=True",
        "detail": "evaluations.models",
        "documentation": {}
    },
    {
        "label": "Reponse",
        "kind": 6,
        "importPath": "evaluations.models",
        "description": "evaluations.models",
        "peekOfCode": "class Reponse(models.Model):\n    texte = models.TextField()\n    question = models.ForeignKey(Question, on_delete=models.CASCADE, related_name='reponses')\n    est_correcte = models.BooleanField(default=False)\n    est_choix_unique = models.BooleanField(default=False)\n    est_choix_multiple = models.BooleanField(default=False)\ndef __str__(self):\n        return f\"Réponse: {self.texte[:50]}...\"\nclass Evaluation(models.Model):\n    cours = models.ForeignKey(Cours, on_delete=models.CASCADE, related_name='evaluations')",
        "detail": "evaluations.models",
        "documentation": {}
    },
    {
        "label": "Evaluation",
        "kind": 6,
        "importPath": "evaluations.models",
        "description": "evaluations.models",
        "peekOfCode": "class Evaluation(models.Model):\n    cours = models.ForeignKey(Cours, on_delete=models.CASCADE, related_name='evaluations')\n    bareme = models.FloatField()\n    date_passage = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"Évaluation de {self.cours} pour le cours {self.cours} - Note: {self.note}\"\nclass ApprenantEvaluation(models.Model):\n    apprenant = models.ForeignKey('users.Apprenant', on_delete=models.CASCADE, related_name='apprenant_evaluations')\n    evaluation = models.ForeignKey(Evaluation, on_delete=models.CASCADE, related_name='apprenant_evaluations')\n    note = models.FloatField()  # Note obtenue par l'apprenant pour cette évaluation",
        "detail": "evaluations.models",
        "documentation": {}
    },
    {
        "label": "ApprenantEvaluation",
        "kind": 6,
        "importPath": "evaluations.models",
        "description": "evaluations.models",
        "peekOfCode": "class ApprenantEvaluation(models.Model):\n    apprenant = models.ForeignKey('users.Apprenant', on_delete=models.CASCADE, related_name='apprenant_evaluations')\n    evaluation = models.ForeignKey(Evaluation, on_delete=models.CASCADE, related_name='apprenant_evaluations')\n    note = models.FloatField()  # Note obtenue par l'apprenant pour cette évaluation\n    date_passage = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        unique_together = ('apprenant', 'evaluation')  # Assure qu'un apprenant ne peut passer qu'une fois une évaluation\n    def __str__(self):\n        return f\"{self.apprenant} - {self.evaluation} - Note: {self.note}\"\nclass Solution(models.Model):",
        "detail": "evaluations.models",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "evaluations.models",
        "description": "evaluations.models",
        "peekOfCode": "class Solution(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE, related_name='questions')\n    def __str__(self):\n        return f\"Solution pour {self.question.texte}\"",
        "detail": "evaluations.models",
        "documentation": {}
    },
    {
        "label": "QuizSerializer",
        "kind": 6,
        "importPath": "evaluations.serializers",
        "description": "evaluations.serializers",
        "peekOfCode": "class QuizSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Quiz\n        fields = ['id', 'titre', 'sequence', 'date_creation']\nclass QuestionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Question\n        fields = ['id', 'texte', 'quiz', 'evaluation', 'type_question']\nclass ReponseSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "evaluations.serializers",
        "documentation": {}
    },
    {
        "label": "QuestionSerializer",
        "kind": 6,
        "importPath": "evaluations.serializers",
        "description": "evaluations.serializers",
        "peekOfCode": "class QuestionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Question\n        fields = ['id', 'texte', 'quiz', 'evaluation', 'type_question']\nclass ReponseSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Reponse\n        fields = ['id', 'texte', 'question', 'est_correcte', 'est_choix_unique', 'est_choix_multiple']\nclass EvaluationSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "evaluations.serializers",
        "documentation": {}
    },
    {
        "label": "ReponseSerializer",
        "kind": 6,
        "importPath": "evaluations.serializers",
        "description": "evaluations.serializers",
        "peekOfCode": "class ReponseSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Reponse\n        fields = ['id', 'texte', 'question', 'est_correcte', 'est_choix_unique', 'est_choix_multiple']\nclass EvaluationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Evaluation\n        fields = ['id', 'cours', 'bareme', 'date_passage']\nclass ApprenantEvaluationSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "evaluations.serializers",
        "documentation": {}
    },
    {
        "label": "EvaluationSerializer",
        "kind": 6,
        "importPath": "evaluations.serializers",
        "description": "evaluations.serializers",
        "peekOfCode": "class EvaluationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Evaluation\n        fields = ['id', 'cours', 'bareme', 'date_passage']\nclass ApprenantEvaluationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ApprenantEvaluation\n        fields = ['id', 'apprenant', 'evaluation', 'note', 'date_passage']\nclass SolutionSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "evaluations.serializers",
        "documentation": {}
    },
    {
        "label": "ApprenantEvaluationSerializer",
        "kind": 6,
        "importPath": "evaluations.serializers",
        "description": "evaluations.serializers",
        "peekOfCode": "class ApprenantEvaluationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ApprenantEvaluation\n        fields = ['id', 'apprenant', 'evaluation', 'note', 'date_passage']\nclass SolutionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Solution\n        fields = ['id', 'question']",
        "detail": "evaluations.serializers",
        "documentation": {}
    },
    {
        "label": "SolutionSerializer",
        "kind": 6,
        "importPath": "evaluations.serializers",
        "description": "evaluations.serializers",
        "peekOfCode": "class SolutionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Solution\n        fields = ['id', 'question']",
        "detail": "evaluations.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "evaluations.urls",
        "description": "evaluations.urls",
        "peekOfCode": "urlpatterns = [\n    path('quizz/', QuizListCreateAPIView.as_view(), name='quiz-list-create'),\n    path('questions/', QuestionListCreateAPIView.as_view(), name='question-list-create'),\n    path('reponses/', ReponseListCreateAPIView.as_view(), name='reponse-list-create'),\n    path('evaluations/', EvaluationListCreateAPIView.as_view(), name='evaluation-list-create'),\n    path('apprenant-evaluations/', ApprenantEvaluationListCreateAPIView.as_view(), name='apprenant-evaluation-list-create'),\n    path('solutions/', SolutionListCreateAPIView.as_view(), name='solution-list-create'),\n]",
        "detail": "evaluations.urls",
        "documentation": {}
    },
    {
        "label": "QuizListCreateAPIView",
        "kind": 6,
        "importPath": "evaluations.views",
        "description": "evaluations.views",
        "peekOfCode": "class QuizListCreateAPIView(APIView):\n    def get(self, request):\n        quizz = Quiz.objects.all()\n        serializer = QuizSerializer(quizz, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    def post(self, request):\n        serializer = QuizSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "evaluations.views",
        "documentation": {}
    },
    {
        "label": "QuestionListCreateAPIView",
        "kind": 6,
        "importPath": "evaluations.views",
        "description": "evaluations.views",
        "peekOfCode": "class QuestionListCreateAPIView(APIView):\n    def get(self, request):\n        questions = Question.objects.all()\n        serializer = QuestionSerializer(questions, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    def post(self, request):\n        serializer = QuestionSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "evaluations.views",
        "documentation": {}
    },
    {
        "label": "ReponseListCreateAPIView",
        "kind": 6,
        "importPath": "evaluations.views",
        "description": "evaluations.views",
        "peekOfCode": "class ReponseListCreateAPIView(APIView):\n    def get(self, request):\n        reponses = Reponse.objects.all()\n        serializer = ReponseSerializer(reponses, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    def post(self, request):\n        serializer = ReponseSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "evaluations.views",
        "documentation": {}
    },
    {
        "label": "EvaluationListCreateAPIView",
        "kind": 6,
        "importPath": "evaluations.views",
        "description": "evaluations.views",
        "peekOfCode": "class EvaluationListCreateAPIView(APIView):\n    def get(self, request):\n        evaluations = Evaluation.objects.all()\n        serializer = EvaluationSerializer(evaluations, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    def post(self, request):\n        serializer = EvaluationSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "evaluations.views",
        "documentation": {}
    },
    {
        "label": "ApprenantEvaluationListCreateAPIView",
        "kind": 6,
        "importPath": "evaluations.views",
        "description": "evaluations.views",
        "peekOfCode": "class ApprenantEvaluationListCreateAPIView(APIView):\n    def get(self, request):\n        apprenant_evaluations = ApprenantEvaluation.objects.all()\n        serializer = ApprenantEvaluationSerializer(apprenant_evaluations, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    def post(self, request):\n        serializer = ApprenantEvaluationSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "evaluations.views",
        "documentation": {}
    },
    {
        "label": "SolutionListCreateAPIView",
        "kind": 6,
        "importPath": "evaluations.views",
        "description": "evaluations.views",
        "peekOfCode": "class SolutionListCreateAPIView(APIView):\n    def get(self, request):\n        solutions = Solution.objects.all()\n        serializer = SolutionSerializer(solutions, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    def post(self, request):\n        serializer = SolutionSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "evaluations.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "feedback.migrations.0001_initial",
        "description": "feedback.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Feedback',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('contenu', models.TextField()),",
        "detail": "feedback.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "feedback.migrations.0002_initial",
        "description": "feedback.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('courses', '0002_initial'),\n        ('evaluations', '0002_initial'),\n        ('feedback', '0001_initial'),\n        ('users', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(",
        "detail": "feedback.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "FeedbackConfig",
        "kind": 6,
        "importPath": "feedback.apps",
        "description": "feedback.apps",
        "peekOfCode": "class FeedbackConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'feedback'",
        "detail": "feedback.apps",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "kind": 6,
        "importPath": "feedback.models",
        "description": "feedback.models",
        "peekOfCode": "class Feedback(models.Model):\n    cours = models.ForeignKey(Cours, on_delete=models.CASCADE, related_name='feedbacks', null=True, blank=True)\n    evaluation = models.ForeignKey(Evaluation, on_delete=models.CASCADE, related_name='feedbacks', null=True, blank=True)\n    auteur = models.ForeignKey('users.User', on_delete=models.CASCADE, related_name='feedbacks', null=True, blank=True)\n    destinataires = models.ManyToManyField('users.User', related_name='feedbacks_recus', blank=True)\n    contenu = models.TextField()\n    note = models.FloatField(null=True, blank=True)  # Note entre 1 et 5, par exemple\n    date_creation = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"Feedback de {self.auteur.username} pour {self.cours.nom}\"",
        "detail": "feedback.models",
        "documentation": {}
    },
    {
        "label": "Progression",
        "kind": 6,
        "importPath": "feedback.models",
        "description": "feedback.models",
        "peekOfCode": "class Progression(models.Model):\n    apprenant = models.ForeignKey('users.User', on_delete=models.CASCADE, related_name='progressions')  # Référence à l'apprenant\n    cours = models.ForeignKey('courses.Cours', on_delete=models.CASCADE, related_name='progressions')  # Référence à la session\n    pourcentage = models.FloatField()  # Pourcentage de progression (0-100)\n    date_mise_a_jour = models.DateTimeField(auto_now=True)  # Date de la dernière mise à jour\n    def __str__(self):\n        return f\"{self.apprenant.username} - {self.cours.nom} : {self.pourcentage}%\"\nclass HistoriqueProgression(models.Model):\n    progression = models.ForeignKey(Progression, on_delete=models.CASCADE, related_name='historique')\n    date_changement = models.DateTimeField(auto_now_add=True)  # Date à laquelle le changement a été enregistré",
        "detail": "feedback.models",
        "documentation": {}
    },
    {
        "label": "HistoriqueProgression",
        "kind": 6,
        "importPath": "feedback.models",
        "description": "feedback.models",
        "peekOfCode": "class HistoriqueProgression(models.Model):\n    progression = models.ForeignKey(Progression, on_delete=models.CASCADE, related_name='historique')\n    date_changement = models.DateTimeField(auto_now_add=True)  # Date à laquelle le changement a été enregistré\n    ancienne_progression = models.FloatField()  # Ancien pourcentage de progression\n    nouvelle_progression = models.FloatField()  # Nouveau pourcentage de progression\n    def __str__(self):\n        return f\"Historique de {self.progression.apprenant.username} pour {self.progression.session.titre} : {self.ancienne_progression}% -> {self.nouvelle_progression}%\"\nclass PlanAction(models.Model):\n    progression = models.ForeignKey(Progression, on_delete=models.CASCADE, related_name='plans_actions')\n    description = models.TextField()  # Description de l'action à entreprendre",
        "detail": "feedback.models",
        "documentation": {}
    },
    {
        "label": "PlanAction",
        "kind": 6,
        "importPath": "feedback.models",
        "description": "feedback.models",
        "peekOfCode": "class PlanAction(models.Model):\n    progression = models.ForeignKey(Progression, on_delete=models.CASCADE, related_name='plans_actions')\n    description = models.TextField()  # Description de l'action à entreprendre\n    date_creation = models.DateTimeField(auto_now_add=True)  # Date à laquelle le plan d'action a été créé\n    date_limite = models.DateTimeField(null=True, blank=True)  # Date limite pour l'action\n    complet = models.BooleanField(default=False)  # Indique si l'action a été complétée\n    def __str__(self):\n        return f\"Plan d'action pour {self.progression.apprenant.username} - {self.description}\"",
        "detail": "feedback.models",
        "documentation": {}
    },
    {
        "label": "FeedbackSerializer",
        "kind": 6,
        "importPath": "feedback.serializers",
        "description": "feedback.serializers",
        "peekOfCode": "class FeedbackSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Feedback\n        fields = ['id', 'cours', 'evaluation', 'auteur', 'destinataires', 'contenu', 'note', 'date_creation']\nclass ProgressionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Progression\n        fields = ['id', 'apprenant', 'cours', 'pourcentage', 'date_mise_a_jour']\nclass HistoriqueProgressionSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "feedback.serializers",
        "documentation": {}
    },
    {
        "label": "ProgressionSerializer",
        "kind": 6,
        "importPath": "feedback.serializers",
        "description": "feedback.serializers",
        "peekOfCode": "class ProgressionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Progression\n        fields = ['id', 'apprenant', 'cours', 'pourcentage', 'date_mise_a_jour']\nclass HistoriqueProgressionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = HistoriqueProgression\n        fields = ['id', 'progression', 'date_changement', 'ancienne_progression', 'nouvelle_progression']\nclass PlanActionSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "feedback.serializers",
        "documentation": {}
    },
    {
        "label": "HistoriqueProgressionSerializer",
        "kind": 6,
        "importPath": "feedback.serializers",
        "description": "feedback.serializers",
        "peekOfCode": "class HistoriqueProgressionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = HistoriqueProgression\n        fields = ['id', 'progression', 'date_changement', 'ancienne_progression', 'nouvelle_progression']\nclass PlanActionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = PlanAction\n        fields = ['id', 'progression', 'description', 'date_creation', 'date_limite', 'complet']",
        "detail": "feedback.serializers",
        "documentation": {}
    },
    {
        "label": "PlanActionSerializer",
        "kind": 6,
        "importPath": "feedback.serializers",
        "description": "feedback.serializers",
        "peekOfCode": "class PlanActionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = PlanAction\n        fields = ['id', 'progression', 'description', 'date_creation', 'date_limite', 'complet']",
        "detail": "feedback.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "feedback.urls",
        "description": "feedback.urls",
        "peekOfCode": "urlpatterns = [\n    path('feedbacks/', FeedbackListCreateAPIView.as_view(), name='feedback-list-create'),\n    path('progressions/', ProgressionListCreateAPIView.as_view(), name='progression-list-create'),\n    path('historique-progressions/', HistoriqueProgressionListCreateAPIView.as_view(), name='historique-progression-list-create'),\n    path('plans-actions/', PlanActionListCreateAPIView.as_view(), name='plan-action-list-create'),\n]",
        "detail": "feedback.urls",
        "documentation": {}
    },
    {
        "label": "FeedbackListCreateAPIView",
        "kind": 6,
        "importPath": "feedback.views",
        "description": "feedback.views",
        "peekOfCode": "class FeedbackListCreateAPIView(APIView):\n    def get(self, request):\n        feedbacks = Feedback.objects.all()\n        serializer = FeedbackSerializer(feedbacks, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    def post(self, request):\n        serializer = FeedbackSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "feedback.views",
        "documentation": {}
    },
    {
        "label": "ProgressionListCreateAPIView",
        "kind": 6,
        "importPath": "feedback.views",
        "description": "feedback.views",
        "peekOfCode": "class ProgressionListCreateAPIView(APIView):\n    def get(self, request):\n        progressions = Progression.objects.all()\n        serializer = ProgressionSerializer(progressions, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    def post(self, request):\n        serializer = ProgressionSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "feedback.views",
        "documentation": {}
    },
    {
        "label": "HistoriqueProgressionListCreateAPIView",
        "kind": 6,
        "importPath": "feedback.views",
        "description": "feedback.views",
        "peekOfCode": "class HistoriqueProgressionListCreateAPIView(APIView):\n    def get(self, request):\n        historique = HistoriqueProgression.objects.all()\n        serializer = HistoriqueProgressionSerializer(historique, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    def post(self, request):\n        serializer = HistoriqueProgressionSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "feedback.views",
        "documentation": {}
    },
    {
        "label": "PlanActionListCreateAPIView",
        "kind": 6,
        "importPath": "feedback.views",
        "description": "feedback.views",
        "peekOfCode": "class PlanActionListCreateAPIView(APIView):\n    def get(self, request):\n        plans = PlanAction.objects.all()\n        serializer = PlanActionSerializer(plans, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    def post(self, request):\n        serializer = PlanActionSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "feedback.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "locations.migrations.0001_initial",
        "description": "locations.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Pays',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('nom', models.CharField(max_length=100)),",
        "detail": "locations.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "LocationsConfig",
        "kind": 6,
        "importPath": "locations.apps",
        "description": "locations.apps",
        "peekOfCode": "class LocationsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'locations'",
        "detail": "locations.apps",
        "documentation": {}
    },
    {
        "label": "Pays",
        "kind": 6,
        "importPath": "locations.models",
        "description": "locations.models",
        "peekOfCode": "class Pays(models.Model):\n    nom = models.CharField(max_length=100)\n    code = models.CharField(max_length=3, unique=True)\n    def __str__(self):\n        return self.nom\nclass Ville(models.Model):\n    nom = models.CharField(max_length=100)\n    pays = models.ForeignKey(Pays, on_delete=models.CASCADE, related_name='villes')\n    def __str__(self):\n        return f\"{self.nom}, {self.pays.nom}\"",
        "detail": "locations.models",
        "documentation": {}
    },
    {
        "label": "Ville",
        "kind": 6,
        "importPath": "locations.models",
        "description": "locations.models",
        "peekOfCode": "class Ville(models.Model):\n    nom = models.CharField(max_length=100)\n    pays = models.ForeignKey(Pays, on_delete=models.CASCADE, related_name='villes')\n    def __str__(self):\n        return f\"{self.nom}, {self.pays.nom}\"\nclass Quartier(models.Model):\n    nom = models.CharField(max_length=100)\n    ville = models.ForeignKey(Ville, on_delete=models.CASCADE, related_name='quartiers')\n    def __str__(self):\n        return f\"{self.nom}, {self.ville.nom}\"",
        "detail": "locations.models",
        "documentation": {}
    },
    {
        "label": "Quartier",
        "kind": 6,
        "importPath": "locations.models",
        "description": "locations.models",
        "peekOfCode": "class Quartier(models.Model):\n    nom = models.CharField(max_length=100)\n    ville = models.ForeignKey(Ville, on_delete=models.CASCADE, related_name='quartiers')\n    def __str__(self):\n        return f\"{self.nom}, {self.ville.nom}\"",
        "detail": "locations.models",
        "documentation": {}
    },
    {
        "label": "PaysSerializer",
        "kind": 6,
        "importPath": "locations.serializers",
        "description": "locations.serializers",
        "peekOfCode": "class PaysSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Pays\n        fields = ['id', 'nom', 'code']\nclass VilleSerializer(serializers.ModelSerializer):\n    pays = PaysSerializer()  # Sérialisation du pays\n    class Meta:\n        model = Ville\n        fields = ['id', 'nom', 'pays']\nclass QuartierSerializer(serializers.ModelSerializer):",
        "detail": "locations.serializers",
        "documentation": {}
    },
    {
        "label": "VilleSerializer",
        "kind": 6,
        "importPath": "locations.serializers",
        "description": "locations.serializers",
        "peekOfCode": "class VilleSerializer(serializers.ModelSerializer):\n    pays = PaysSerializer()  # Sérialisation du pays\n    class Meta:\n        model = Ville\n        fields = ['id', 'nom', 'pays']\nclass QuartierSerializer(serializers.ModelSerializer):\n    ville = VilleSerializer()  # Sérialisation de la ville\n    class Meta:\n        model = Quartier\n        fields = ['id', 'nom', 'ville']",
        "detail": "locations.serializers",
        "documentation": {}
    },
    {
        "label": "QuartierSerializer",
        "kind": 6,
        "importPath": "locations.serializers",
        "description": "locations.serializers",
        "peekOfCode": "class QuartierSerializer(serializers.ModelSerializer):\n    ville = VilleSerializer()  # Sérialisation de la ville\n    class Meta:\n        model = Quartier\n        fields = ['id', 'nom', 'ville']",
        "detail": "locations.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "locations.urls",
        "description": "locations.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'pays', PaysViewSet)\nrouter.register(r'villes', VilleViewSet)\nrouter.register(r'quartiers', QuartierViewSet)\nurlpatterns = [\n    # path('api/', include(router.urls)),\n]\nurlpatterns = router.urls",
        "detail": "locations.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "locations.urls",
        "description": "locations.urls",
        "peekOfCode": "urlpatterns = [\n    # path('api/', include(router.urls)),\n]\nurlpatterns = router.urls",
        "detail": "locations.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "locations.urls",
        "description": "locations.urls",
        "peekOfCode": "urlpatterns = router.urls",
        "detail": "locations.urls",
        "documentation": {}
    },
    {
        "label": "PaysViewSet",
        "kind": 6,
        "importPath": "locations.views",
        "description": "locations.views",
        "peekOfCode": "class PaysViewSet(viewsets.ModelViewSet):\n    queryset = Pays.objects.all()\n    serializer_class = PaysSerializer\nclass VilleViewSet(viewsets.ModelViewSet):\n    queryset = Ville.objects.all()\n    serializer_class = VilleSerializer\nclass QuartierViewSet(viewsets.ModelViewSet):\n    queryset = Quartier.objects.all()\n    serializer_class = QuartierSerializer",
        "detail": "locations.views",
        "documentation": {}
    },
    {
        "label": "VilleViewSet",
        "kind": 6,
        "importPath": "locations.views",
        "description": "locations.views",
        "peekOfCode": "class VilleViewSet(viewsets.ModelViewSet):\n    queryset = Ville.objects.all()\n    serializer_class = VilleSerializer\nclass QuartierViewSet(viewsets.ModelViewSet):\n    queryset = Quartier.objects.all()\n    serializer_class = QuartierSerializer",
        "detail": "locations.views",
        "documentation": {}
    },
    {
        "label": "QuartierViewSet",
        "kind": 6,
        "importPath": "locations.views",
        "description": "locations.views",
        "peekOfCode": "class QuartierViewSet(viewsets.ModelViewSet):\n    queryset = Quartier.objects.all()\n    serializer_class = QuartierSerializer",
        "detail": "locations.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "notifications.migrations.0001_initial",
        "description": "notifications.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Notification',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('message', models.TextField()),",
        "detail": "notifications.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "notifications.migrations.0002_initial",
        "description": "notifications.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('notifications', '0001_initial'),\n        ('users', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='notification',\n            name='user',",
        "detail": "notifications.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "NotificationsConfig",
        "kind": 6,
        "importPath": "notifications.apps",
        "description": "notifications.apps",
        "peekOfCode": "class NotificationsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'notifications'",
        "detail": "notifications.apps",
        "documentation": {}
    },
    {
        "label": "Notification",
        "kind": 6,
        "importPath": "notifications.models",
        "description": "notifications.models",
        "peekOfCode": "class Notification(models.Model):\n    TYPE_CHOICES = [\n        ('INFO', 'Information'),\n        ('SUCCESS', 'Succès'),\n        ('WARNING', 'Avertissement'),\n        ('ERROR', 'Erreur'),\n    ]\n    user = models.ForeignKey(\n        'users.User',\n        on_delete=models.CASCADE,",
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "prograppApi.asgi",
        "description": "prograppApi.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "prograppApi.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-$s4b+_ug=(xi0ul0(8u-^-8pxn@z=t08y@-e&5_3g#1tam2wl6'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['127.0.0.1', 'localhost']\n# Application definition\nINSTALLED_APPS = [",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-$s4b+_ug=(xi0ul0(8u-^-8pxn@z=t08y@-e&5_3g#1tam2wl6'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['127.0.0.1', 'localhost']\n# Application definition\nINSTALLED_APPS = [\n    \"corsheaders\",\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['127.0.0.1', 'localhost']\n# Application definition\nINSTALLED_APPS = [\n    \"corsheaders\",\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['127.0.0.1', 'localhost']\n# Application definition\nINSTALLED_APPS = [\n    \"corsheaders\",\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"corsheaders\",\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'rest_framework.authtoken',",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "SITE_ID",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "SITE_ID = 1\nMIDDLEWARE = [\n    \"corsheaders.middleware.CorsMiddleware\",\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"corsheaders.middleware.CorsMiddleware\",\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'allauth.account.middleware.AccountMiddleware', ",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "ROOT_URLCONF = 'prograppApi.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "WSGI_APPLICATION = 'prograppApi.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    # 'allauth.account.auth_backends.AuthenticationBackend',\n)\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        # 'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.TokenAuthentication',\n    ],\n    'EXCEPTION_HANDLER': 'users.utils.custom_exception_handler',",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        # 'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.TokenAuthentication',\n    ],\n    'EXCEPTION_HANDLER': 'users.utils.custom_exception_handler',\n}\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'fabricedjerabe01@gmail.com'\nEMAIL_HOST_PASSWORD = 'vvqddykvdinibuog'\nFRONTEND_BASE_URL = 'http://localhost:4200'\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_REQUIRED = False\nACCOUNT_AUTHENTICATION_METHOD = 'email'",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "EMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'fabricedjerabe01@gmail.com'\nEMAIL_HOST_PASSWORD = 'vvqddykvdinibuog'\nFRONTEND_BASE_URL = 'http://localhost:4200'\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_REQUIRED = False\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # Vérification obligatoire",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "EMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'fabricedjerabe01@gmail.com'\nEMAIL_HOST_PASSWORD = 'vvqddykvdinibuog'\nFRONTEND_BASE_URL = 'http://localhost:4200'\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_REQUIRED = False\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # Vérification obligatoire\nACCOUNT_LOGOUT_ON_GET = True  # Se déconnecter immédiatement sur demande",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'fabricedjerabe01@gmail.com'\nEMAIL_HOST_PASSWORD = 'vvqddykvdinibuog'\nFRONTEND_BASE_URL = 'http://localhost:4200'\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_REQUIRED = False\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # Vérification obligatoire\nACCOUNT_LOGOUT_ON_GET = True  # Se déconnecter immédiatement sur demande\n# REST_AUTH_SERIALIZERS = {",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "EMAIL_HOST_USER = 'fabricedjerabe01@gmail.com'\nEMAIL_HOST_PASSWORD = 'vvqddykvdinibuog'\nFRONTEND_BASE_URL = 'http://localhost:4200'\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_REQUIRED = False\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # Vérification obligatoire\nACCOUNT_LOGOUT_ON_GET = True  # Se déconnecter immédiatement sur demande\n# REST_AUTH_SERIALIZERS = {\n#     'USER_DETAILS_SERIALIZER': 'users.serializers.CustomUserSerializer',  # Définissez un serializer personnalisé pour le profil utilisateur.",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = 'vvqddykvdinibuog'\nFRONTEND_BASE_URL = 'http://localhost:4200'\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_REQUIRED = False\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # Vérification obligatoire\nACCOUNT_LOGOUT_ON_GET = True  # Se déconnecter immédiatement sur demande\n# REST_AUTH_SERIALIZERS = {\n#     'USER_DETAILS_SERIALIZER': 'users.serializers.CustomUserSerializer',  # Définissez un serializer personnalisé pour le profil utilisateur.\n# }",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "FRONTEND_BASE_URL",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "FRONTEND_BASE_URL = 'http://localhost:4200'\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_REQUIRED = False\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # Vérification obligatoire\nACCOUNT_LOGOUT_ON_GET = True  # Se déconnecter immédiatement sur demande\n# REST_AUTH_SERIALIZERS = {\n#     'USER_DETAILS_SERIALIZER': 'users.serializers.CustomUserSerializer',  # Définissez un serializer personnalisé pour le profil utilisateur.\n# }\nAUTH_USER_MODEL = 'users.User'",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_REQUIRED",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "ACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_REQUIRED = False\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # Vérification obligatoire\nACCOUNT_LOGOUT_ON_GET = True  # Se déconnecter immédiatement sur demande\n# REST_AUTH_SERIALIZERS = {\n#     'USER_DETAILS_SERIALIZER': 'users.serializers.CustomUserSerializer',  # Définissez un serializer personnalisé pour le profil utilisateur.\n# }\nAUTH_USER_MODEL = 'users.User'\n# Internationalization",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_USERNAME_REQUIRED",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "ACCOUNT_USERNAME_REQUIRED = False\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # Vérification obligatoire\nACCOUNT_LOGOUT_ON_GET = True  # Se déconnecter immédiatement sur demande\n# REST_AUTH_SERIALIZERS = {\n#     'USER_DETAILS_SERIALIZER': 'users.serializers.CustomUserSerializer',  # Définissez un serializer personnalisé pour le profil utilisateur.\n# }\nAUTH_USER_MODEL = 'users.User'\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_AUTHENTICATION_METHOD",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "ACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # Vérification obligatoire\nACCOUNT_LOGOUT_ON_GET = True  # Se déconnecter immédiatement sur demande\n# REST_AUTH_SERIALIZERS = {\n#     'USER_DETAILS_SERIALIZER': 'users.serializers.CustomUserSerializer',  # Définissez un serializer personnalisé pour le profil utilisateur.\n# }\nAUTH_USER_MODEL = 'users.User'\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\nLANGUAGE_CODE = 'en-us'",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_VERIFICATION",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "ACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # Vérification obligatoire\nACCOUNT_LOGOUT_ON_GET = True  # Se déconnecter immédiatement sur demande\n# REST_AUTH_SERIALIZERS = {\n#     'USER_DETAILS_SERIALIZER': 'users.serializers.CustomUserSerializer',  # Définissez un serializer personnalisé pour le profil utilisateur.\n# }\nAUTH_USER_MODEL = 'users.User'\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_LOGOUT_ON_GET",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "ACCOUNT_LOGOUT_ON_GET = True  # Se déconnecter immédiatement sur demande\n# REST_AUTH_SERIALIZERS = {\n#     'USER_DETAILS_SERIALIZER': 'users.serializers.CustomUserSerializer',  # Définissez un serializer personnalisé pour le profil utilisateur.\n# }\nAUTH_USER_MODEL = 'users.User'\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'users.User'\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCORS_ALLOWED_ORIGINS = [",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:4200\",  # Origine de votre application Angular",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:4200\",  # Origine de votre application Angular\n]",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:4200\",  # Origine de votre application Angular\n]",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:4200\",  # Origine de votre application Angular\n]",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "prograppApi.settings",
        "description": "prograppApi.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\n    \"http://localhost:4200\",  # Origine de votre application Angular\n]",
        "detail": "prograppApi.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "prograppApi.urls",
        "description": "prograppApi.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('users.urls')),\n    path('api/', include('academics.urls')),\n    path('api/', include('locations.urls')),\n    path('api/', include('courses.urls')),\n    path('api/', include('collaborations.urls')),\n    path('api/', include('evaluations.urls')),\n    # path('api/', include('notifications.urls')),\n    path('api/', include('resources.urls')),",
        "detail": "prograppApi.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "prograppApi.wsgi",
        "description": "prograppApi.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "prograppApi.wsgi",
        "documentation": {}
    },
    {
        "label": "ProgressConfig",
        "kind": 6,
        "importPath": "progress.apps",
        "description": "progress.apps",
        "peekOfCode": "class ProgressConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'progress'",
        "detail": "progress.apps",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "resources.migrations.0001_initial",
        "description": "resources.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('courses', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='RessourceSupplementaire',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "resources.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "resources.migrations.0002_initial",
        "description": "resources.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('courses', '0002_initial'),\n        ('resources', '0001_initial'),\n        ('users', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='ressourcesupplementaire',",
        "detail": "resources.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "ResourcesConfig",
        "kind": 6,
        "importPath": "resources.apps",
        "description": "resources.apps",
        "peekOfCode": "class ResourcesConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'resources'",
        "detail": "resources.apps",
        "documentation": {}
    },
    {
        "label": "Ressource",
        "kind": 6,
        "importPath": "resources.models",
        "description": "resources.models",
        "peekOfCode": "class Ressource(models.Model):\n    titre = models.CharField(max_length=255)\n    fichier = models.FileField(upload_to='ressources/')\n    sequence = models.ForeignKey(Sequence, on_delete=models.CASCADE, related_name='ressources')\n    date_ajout = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return self.titre\nclass RessourceSupplementaire(models.Model):\n    titre = models.CharField(max_length=255)\n    fichier = models.FileField(upload_to='ressources_supplementaires/')",
        "detail": "resources.models",
        "documentation": {}
    },
    {
        "label": "RessourceSupplementaire",
        "kind": 6,
        "importPath": "resources.models",
        "description": "resources.models",
        "peekOfCode": "class RessourceSupplementaire(models.Model):\n    titre = models.CharField(max_length=255)\n    fichier = models.FileField(upload_to='ressources_supplementaires/')\n    sequence = models.ForeignKey(\n        Sequence, on_delete=models.CASCADE, related_name='ressources_supplementaires', null=True, blank=True\n    )\n    apprenant = models.ForeignKey('users.Apprenant', on_delete=models.CASCADE, related_name='ressources_supplementaires')\n    date_ajout = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"{self.titre} pour {self.apprenant.nom}\"",
        "detail": "resources.models",
        "documentation": {}
    },
    {
        "label": "PieceJointe",
        "kind": 6,
        "importPath": "resources.models",
        "description": "resources.models",
        "peekOfCode": "class PieceJointe(models.Model):\n    fichier = models.FileField(upload_to='pieces_jointes/')\n    ressource = models.ForeignKey(\n        Ressource, on_delete=models.CASCADE, related_name='pieces_jointes', null=True, blank=True\n    )\n    ressource_supplementaire = models.ForeignKey(\n        RessourceSupplementaire, on_delete=models.CASCADE, related_name='pieces_jointes', null=True, blank=True\n    )\n    def __str__(self):\n        return f\"Pièce jointe pour {self.ressource.titre}\"",
        "detail": "resources.models",
        "documentation": {}
    },
    {
        "label": "RessourcePieceJointe",
        "kind": 6,
        "importPath": "resources.models",
        "description": "resources.models",
        "peekOfCode": "class RessourcePieceJointe(models.Model):\n    ressource = models.ForeignKey(Ressource, on_delete=models.CASCADE, related_name='ressources_pieces_jointes')\n    piece_jointe = models.ForeignKey(PieceJointe, on_delete=models.CASCADE, related_name='ressource_piece_jointe')\n    def __str__(self):\n        return f\"{self.ressource.titre} - {self.piece_jointe.fichier.name}\"\nclass RessourceSuppPieceJointe(models.Model):\n    ressource = models.ForeignKey(RessourceSupplementaire, on_delete=models.CASCADE, related_name='ressources_supplementaires_pieces_jointes')\n    piece_jointe = models.ForeignKey(PieceJointe, on_delete=models.CASCADE, related_name='ressource_supp_piece_jointe')\n    def __str__(self):\n        return f\"{self.ressource.titre} - {self.piece_jointe.fichier.name}\"",
        "detail": "resources.models",
        "documentation": {}
    },
    {
        "label": "RessourceSuppPieceJointe",
        "kind": 6,
        "importPath": "resources.models",
        "description": "resources.models",
        "peekOfCode": "class RessourceSuppPieceJointe(models.Model):\n    ressource = models.ForeignKey(RessourceSupplementaire, on_delete=models.CASCADE, related_name='ressources_supplementaires_pieces_jointes')\n    piece_jointe = models.ForeignKey(PieceJointe, on_delete=models.CASCADE, related_name='ressource_supp_piece_jointe')\n    def __str__(self):\n        return f\"{self.ressource.titre} - {self.piece_jointe.fichier.name}\"",
        "detail": "resources.models",
        "documentation": {}
    },
    {
        "label": "RessourceSerializer",
        "kind": 6,
        "importPath": "resources.serializers",
        "description": "resources.serializers",
        "peekOfCode": "class RessourceSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Ressource\n        fields = ['id', 'titre', 'fichier', 'sequence', 'date_ajout']\nclass RessourceSupplementaireSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = RessourceSupplementaire\n        fields = ['id', 'titre', 'fichier', 'sequence', 'apprenant', 'date_ajout']\nclass PieceJointeSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "resources.serializers",
        "documentation": {}
    },
    {
        "label": "RessourceSupplementaireSerializer",
        "kind": 6,
        "importPath": "resources.serializers",
        "description": "resources.serializers",
        "peekOfCode": "class RessourceSupplementaireSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = RessourceSupplementaire\n        fields = ['id', 'titre', 'fichier', 'sequence', 'apprenant', 'date_ajout']\nclass PieceJointeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = PieceJointe\n        fields = ['id', 'fichier', 'ressource', 'ressource_supplementaire']\nclass RessourcePieceJointeSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "resources.serializers",
        "documentation": {}
    },
    {
        "label": "PieceJointeSerializer",
        "kind": 6,
        "importPath": "resources.serializers",
        "description": "resources.serializers",
        "peekOfCode": "class PieceJointeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = PieceJointe\n        fields = ['id', 'fichier', 'ressource', 'ressource_supplementaire']\nclass RessourcePieceJointeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = RessourcePieceJointe\n        fields = ['id', 'ressource', 'piece_jointe']\nclass RessourceSuppPieceJointeSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "resources.serializers",
        "documentation": {}
    },
    {
        "label": "RessourcePieceJointeSerializer",
        "kind": 6,
        "importPath": "resources.serializers",
        "description": "resources.serializers",
        "peekOfCode": "class RessourcePieceJointeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = RessourcePieceJointe\n        fields = ['id', 'ressource', 'piece_jointe']\nclass RessourceSuppPieceJointeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = RessourceSuppPieceJointe\n        fields = ['id', 'ressource', 'piece_jointe']",
        "detail": "resources.serializers",
        "documentation": {}
    },
    {
        "label": "RessourceSuppPieceJointeSerializer",
        "kind": 6,
        "importPath": "resources.serializers",
        "description": "resources.serializers",
        "peekOfCode": "class RessourceSuppPieceJointeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = RessourceSuppPieceJointe\n        fields = ['id', 'ressource', 'piece_jointe']",
        "detail": "resources.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "resources.urls",
        "description": "resources.urls",
        "peekOfCode": "urlpatterns = [\n    path('ressources/', RessourceListCreateAPIView.as_view(), name='ressource-list-create'),\n    path('ressources-supplementaires/', RessourceSupplementaireListCreateAPIView.as_view(), name='ressource-supplementaire-list-create'),\n    path('pieces-jointes/', PieceJointeListCreateAPIView.as_view(), name='piece-jointe-list-create'),\n    path('ressource-piece-jointe/', RessourcePieceJointeListCreateAPIView.as_view(), name='ressource-piece-jointe-list-create'),\n    path('ressource-supp-piece-jointe/', RessourceSuppPieceJointeListCreateAPIView.as_view(), name='ressource-supp-piece-jointe-list-create'),\n]",
        "detail": "resources.urls",
        "documentation": {}
    },
    {
        "label": "RessourceListCreateAPIView",
        "kind": 6,
        "importPath": "resources.views",
        "description": "resources.views",
        "peekOfCode": "class RessourceListCreateAPIView(APIView):\n    def get(self, request):\n        ressources = Ressource.objects.all()\n        serializer = RessourceSerializer(ressources, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    def post(self, request):\n        serializer = RessourceSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "resources.views",
        "documentation": {}
    },
    {
        "label": "RessourceSupplementaireListCreateAPIView",
        "kind": 6,
        "importPath": "resources.views",
        "description": "resources.views",
        "peekOfCode": "class RessourceSupplementaireListCreateAPIView(APIView):\n    def get(self, request):\n        ressources_supplementaires = RessourceSupplementaire.objects.all()\n        serializer = RessourceSupplementaireSerializer(ressources_supplementaires, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    def post(self, request):\n        serializer = RessourceSupplementaireSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "resources.views",
        "documentation": {}
    },
    {
        "label": "PieceJointeListCreateAPIView",
        "kind": 6,
        "importPath": "resources.views",
        "description": "resources.views",
        "peekOfCode": "class PieceJointeListCreateAPIView(APIView):\n    def get(self, request):\n        pieces_jointes = PieceJointe.objects.all()\n        serializer = PieceJointeSerializer(pieces_jointes, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    def post(self, request):\n        serializer = PieceJointeSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "resources.views",
        "documentation": {}
    },
    {
        "label": "RessourcePieceJointeListCreateAPIView",
        "kind": 6,
        "importPath": "resources.views",
        "description": "resources.views",
        "peekOfCode": "class RessourcePieceJointeListCreateAPIView(APIView):\n    def get(self, request):\n        ressources_pieces_jointes = RessourcePieceJointe.objects.all()\n        serializer = RessourcePieceJointeSerializer(ressources_pieces_jointes, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    def post(self, request):\n        serializer = RessourcePieceJointeSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "resources.views",
        "documentation": {}
    },
    {
        "label": "RessourceSuppPieceJointeListCreateAPIView",
        "kind": 6,
        "importPath": "resources.views",
        "description": "resources.views",
        "peekOfCode": "class RessourceSuppPieceJointeListCreateAPIView(APIView):\n    def get(self, request):\n        ressources_supp_pieces_jointes = RessourceSuppPieceJointe.objects.all()\n        serializer = RessourceSuppPieceJointeSerializer(ressources_supp_pieces_jointes, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    def post(self, request):\n        serializer = RessourceSuppPieceJointeSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "resources.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "users.migrations.0001_initial",
        "description": "users.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('academics', '0001_initial'),\n        ('auth', '0012_alter_user_first_name_max_length'),\n        ('locations', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',",
        "detail": "users.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "users.migrations.0002_remove_formateur_telephone_admin_date_entree_and_more",
        "description": "users.migrations.0002_remove_formateur_telephone_admin_date_entree_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('academics', '0003_anneescolaire_description_classe_date_creation_and_more'),\n        ('users', '0001_initial'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='formateur',\n            name='telephone',\n        ),",
        "detail": "users.migrations.0002_remove_formateur_telephone_admin_date_entree_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "users.migrations.0003_user_is_staff_alter_user_is_superuser",
        "description": "users.migrations.0003_user_is_staff_alter_user_is_superuser",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('users', '0002_remove_formateur_telephone_admin_date_entree_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='user',\n            name='is_staff',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "users.migrations.0003_user_is_staff_alter_user_is_superuser",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "users.migrations.0004_alter_user_pays_residence",
        "description": "users.migrations.0004_alter_user_pays_residence",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('locations', '0001_initial'),\n        ('users', '0003_user_is_staff_alter_user_is_superuser'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='pays_residence',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='locations.pays'),",
        "detail": "users.migrations.0004_alter_user_pays_residence",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "users.migrations.0005_remove_user_is_admin_remove_user_is_apprenant_and_more",
        "description": "users.migrations.0005_remove_user_is_admin_remove_user_is_apprenant_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('users', '0004_alter_user_pays_residence'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='user',\n            name='is_admin',\n        ),\n        migrations.RemoveField(",
        "detail": "users.migrations.0005_remove_user_is_admin_remove_user_is_apprenant_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "users.migrations.0006_alter_admin_institution_alter_apprenant_classe_and_more",
        "description": "users.migrations.0006_alter_admin_institution_alter_apprenant_classe_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('academics', '0003_anneescolaire_description_classe_date_creation_and_more'),\n        ('users', '0005_remove_user_is_admin_remove_user_is_apprenant_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='admin',\n            name='institution',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='administrateurs', to='academics.institution'),",
        "detail": "users.migrations.0006_alter_admin_institution_alter_apprenant_classe_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "users.migrations.0007_alter_user_is_active",
        "description": "users.migrations.0007_alter_user_is_active",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('users', '0006_alter_admin_institution_alter_apprenant_classe_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='is_active',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "users.migrations.0007_alter_user_is_active",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "users.migrations.0008_alter_formateur_groupes_alter_formateur_institutions_and_more",
        "description": "users.migrations.0008_alter_formateur_groupes_alter_formateur_institutions_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('academics', '0003_anneescolaire_description_classe_date_creation_and_more'),\n        ('users', '0007_alter_user_is_active'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='formateur',\n            name='groupes',\n            field=models.ManyToManyField(blank=True, null=True, related_name='formateurs', to='academics.groupe'),",
        "detail": "users.migrations.0008_alter_formateur_groupes_alter_formateur_institutions_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "users.migrations.0009_user_activation_token",
        "description": "users.migrations.0009_user_activation_token",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('users', '0008_alter_formateur_groupes_alter_formateur_institutions_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='user',\n            name='activation_token',\n            field=models.CharField(blank=True, editable=False, max_length=255),\n        ),",
        "detail": "users.migrations.0009_user_activation_token",
        "documentation": {}
    },
    {
        "label": "CustomUserAdmin",
        "kind": 6,
        "importPath": "users.admin",
        "description": "users.admin",
        "peekOfCode": "class CustomUserAdmin(admin.ModelAdmin):\n    list_display = ('email', 'nom', 'prenom', 'is_active', 'is_staff', 'is_superuser')\n    search_fields = ('email', 'nom', 'prenom')\n    list_filter = ('is_active', 'is_staff', 'is_superuser', 'pays_residence')\n    readonly_fields = ('date_joined',)\n@admin.register(Admin)\nclass ApprenantAdmin(admin.ModelAdmin):\n    list_display = ('email', 'nom', 'prenom', 'is_active')\n    search_fields = ('email', 'nom', 'prenom')\n    list_filter = ('is_active',)",
        "detail": "users.admin",
        "documentation": {}
    },
    {
        "label": "ApprenantAdmin",
        "kind": 6,
        "importPath": "users.admin",
        "description": "users.admin",
        "peekOfCode": "class ApprenantAdmin(admin.ModelAdmin):\n    list_display = ('email', 'nom', 'prenom', 'is_active')\n    search_fields = ('email', 'nom', 'prenom')\n    list_filter = ('is_active',)\n@admin.register(ResponsableAcademique)\nclass ResponsableAcademiqueAdmin(admin.ModelAdmin):\n    list_display = ('email', 'nom', 'prenom', 'is_active')\n    search_fields = ('email', 'nom', 'prenom')\n    list_filter = ('is_active',)\n@admin.register(Formateur)",
        "detail": "users.admin",
        "documentation": {}
    },
    {
        "label": "ResponsableAcademiqueAdmin",
        "kind": 6,
        "importPath": "users.admin",
        "description": "users.admin",
        "peekOfCode": "class ResponsableAcademiqueAdmin(admin.ModelAdmin):\n    list_display = ('email', 'nom', 'prenom', 'is_active')\n    search_fields = ('email', 'nom', 'prenom')\n    list_filter = ('is_active',)\n@admin.register(Formateur)\nclass FormateurAdmin(admin.ModelAdmin):\n    list_display = ('email', 'nom', 'prenom', 'is_active')\n    search_fields = ('email', 'nom', 'prenom')\n    list_filter = ('is_active',)\n@admin.register(Apprenant)",
        "detail": "users.admin",
        "documentation": {}
    },
    {
        "label": "FormateurAdmin",
        "kind": 6,
        "importPath": "users.admin",
        "description": "users.admin",
        "peekOfCode": "class FormateurAdmin(admin.ModelAdmin):\n    list_display = ('email', 'nom', 'prenom', 'is_active')\n    search_fields = ('email', 'nom', 'prenom')\n    list_filter = ('is_active',)\n@admin.register(Apprenant)\nclass ApprenantAdmin(admin.ModelAdmin):\n    list_display = ('email', 'nom', 'prenom', 'is_active')\n    search_fields = ('email', 'nom', 'prenom')\n    list_filter = ('is_active',)\n@admin.register(Parent)",
        "detail": "users.admin",
        "documentation": {}
    },
    {
        "label": "ApprenantAdmin",
        "kind": 6,
        "importPath": "users.admin",
        "description": "users.admin",
        "peekOfCode": "class ApprenantAdmin(admin.ModelAdmin):\n    list_display = ('email', 'nom', 'prenom', 'is_active')\n    search_fields = ('email', 'nom', 'prenom')\n    list_filter = ('is_active',)\n@admin.register(Parent)\nclass ParentAdmin(admin.ModelAdmin):\n    list_display = ('email', 'nom', 'prenom', 'is_active')\n    search_fields = ('email', 'nom', 'prenom')\n    list_filter = ('is_active',)",
        "detail": "users.admin",
        "documentation": {}
    },
    {
        "label": "ParentAdmin",
        "kind": 6,
        "importPath": "users.admin",
        "description": "users.admin",
        "peekOfCode": "class ParentAdmin(admin.ModelAdmin):\n    list_display = ('email', 'nom', 'prenom', 'is_active')\n    search_fields = ('email', 'nom', 'prenom')\n    list_filter = ('is_active',)",
        "detail": "users.admin",
        "documentation": {}
    },
    {
        "label": "UsersConfig",
        "kind": 6,
        "importPath": "users.apps",
        "description": "users.apps",
        "peekOfCode": "class UsersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'users'\n    def ready(self):\n        import users.signals",
        "detail": "users.apps",
        "documentation": {}
    },
    {
        "label": "CustomUserManager",
        "kind": 6,
        "importPath": "users.models",
        "description": "users.models",
        "peekOfCode": "class CustomUserManager(BaseUserManager):\n    def create_user(self, email, password=None, **extra_fields):\n        if not email:\n            raise ValueError('L\\'email est requis')\n        email = self.normalize_email(email)\n        extra_fields.setdefault('is_active', True)\n        user = self.model(email=email, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user",
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "users.models",
        "description": "users.models",
        "peekOfCode": "class User(AbstractBaseUser, PermissionsMixin):\n    email = models.EmailField(unique=True)\n    nom = models.CharField(max_length=30)\n    prenom = models.CharField(max_length=30)\n    telephone = models.CharField(max_length=15, blank=True, null=True)\n    pays_residence = models.ForeignKey(Pays, on_delete=models.CASCADE, related_name='users', null=True)\n    is_active = models.BooleanField(default=False)\n    date_joined = models.DateTimeField(default=now)\n    is_staff = models.BooleanField(default=False)  # Obligatoire pour l'admin\n    is_superuser = models.BooleanField(default=False)",
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "Admin",
        "kind": 6,
        "importPath": "users.models",
        "description": "users.models",
        "peekOfCode": "class Admin(User):\n    date_entree = models.DateField(null=True)\n    institution = models.ForeignKey('academics.Institution', on_delete=models.CASCADE, related_name='administrateurs', null=True)\n    class Meta:\n        pass\nclass SuperAdmin(User):\n    pass\nclass Parent(User):\n    institution = models.ForeignKey('academics.Institution', on_delete=models.CASCADE, related_name='parents', null=True, blank=True)\nclass Apprenant(User):",
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "SuperAdmin",
        "kind": 6,
        "importPath": "users.models",
        "description": "users.models",
        "peekOfCode": "class SuperAdmin(User):\n    pass\nclass Parent(User):\n    institution = models.ForeignKey('academics.Institution', on_delete=models.CASCADE, related_name='parents', null=True, blank=True)\nclass Apprenant(User):\n    matricule = models.CharField(max_length=20, unique=True, null=True)\n    date_naissance = models.DateField(null=True)\n    groupe = models.ForeignKey('academics.Groupe', on_delete=models.CASCADE, related_name='groupe_apprenant', null=True)\n    tuteur = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='children', null=True)\n    classe = models.ForeignKey('academics.Classe', on_delete=models.CASCADE, related_name='classe_apprenant', null=True)",
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "Parent",
        "kind": 6,
        "importPath": "users.models",
        "description": "users.models",
        "peekOfCode": "class Parent(User):\n    institution = models.ForeignKey('academics.Institution', on_delete=models.CASCADE, related_name='parents', null=True, blank=True)\nclass Apprenant(User):\n    matricule = models.CharField(max_length=20, unique=True, null=True)\n    date_naissance = models.DateField(null=True)\n    groupe = models.ForeignKey('academics.Groupe', on_delete=models.CASCADE, related_name='groupe_apprenant', null=True)\n    tuteur = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='children', null=True)\n    classe = models.ForeignKey('academics.Classe', on_delete=models.CASCADE, related_name='classe_apprenant', null=True)\n    class Meta:\n        pass",
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "Apprenant",
        "kind": 6,
        "importPath": "users.models",
        "description": "users.models",
        "peekOfCode": "class Apprenant(User):\n    matricule = models.CharField(max_length=20, unique=True, null=True)\n    date_naissance = models.DateField(null=True)\n    groupe = models.ForeignKey('academics.Groupe', on_delete=models.CASCADE, related_name='groupe_apprenant', null=True)\n    tuteur = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='children', null=True)\n    classe = models.ForeignKey('academics.Classe', on_delete=models.CASCADE, related_name='classe_apprenant', null=True)\n    class Meta:\n        pass\nclass Formateur(User):\n    institutions = models.ManyToManyField('academics.Institution', related_name=\"formateurs_users\", null=True, blank=True)",
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "Formateur",
        "kind": 6,
        "importPath": "users.models",
        "description": "users.models",
        "peekOfCode": "class Formateur(User):\n    institutions = models.ManyToManyField('academics.Institution', related_name=\"formateurs_users\", null=True, blank=True)\n    specialites = models.ManyToManyField('academics.Specialite', related_name=\"formateurs\", null=True, blank=True)\n    groupes = models.ManyToManyField('academics.Groupe', related_name=\"formateurs\", null=True, blank=True)\n    def __str__(self):\n        return self.nom\n    class Meta:\n        pass\nclass ResponsableAcademique(User):\n    institution = models.ForeignKey('academics.Institution', on_delete=models.CASCADE, related_name='responsables_academiques', null=True)",
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "ResponsableAcademique",
        "kind": 6,
        "importPath": "users.models",
        "description": "users.models",
        "peekOfCode": "class ResponsableAcademique(User):\n    institution = models.ForeignKey('academics.Institution', on_delete=models.CASCADE, related_name='responsables_academiques', null=True)\n    departement = models.ForeignKey('academics.Departement', on_delete=models.CASCADE, related_name='responsables_departement', null=True, blank=True)\n    def __str__(self):\n        return self.nom\n    class Meta:\n        pass",
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "users.serializers",
        "description": "users.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['email', 'nom', 'prenom', 'telephone', 'pays_residence', 'password']\n        extra_kwargs = {'password': {'write_only': True}}\n    def create(self, validated_data):\n        user = User.objects.create_user(**validated_data)\n        return {\n            \"message\": \"Un e-mail de vérification a été envoyé à l'adresse fournie.\"\n        }",
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "UserRegisterSerializer",
        "kind": 6,
        "importPath": "users.serializers",
        "description": "users.serializers",
        "peekOfCode": "class UserRegisterSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['email', 'nom', 'prenom', 'telephone', 'pays_residence', 'password']\n        extra_kwargs = {'password': {'write_only': True}}\n    def create(self, validated_data):\n        with transaction.atomic():\n            user = User.objects.create_user(**validated_data)\n            user.is_active = False  # L'utilisateur est inactif jusqu'à la vérification\n            user.save()",
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "UserLoginSerializer",
        "kind": 6,
        "importPath": "users.serializers",
        "description": "users.serializers",
        "peekOfCode": "class UserLoginSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    password = serializers.CharField(write_only=True)\n    def validate(self, data):\n        email = data.get('email')\n        password = data.get('password')\n        # Chercher l'utilisateur dans la base de données\n        user = get_user_model().objects.filter(email=email).first()\n        if user is None:\n            raise AuthenticationFailed(\"Identifiants invalides.\")",
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "AdminSerializer",
        "kind": 6,
        "importPath": "users.serializers",
        "description": "users.serializers",
        "peekOfCode": "class AdminSerializer(UserSerializer):\n    class Meta(UserSerializer.Meta):\n        model = Admin\n        fields = UserRegisterSerializer.Meta.fields + ['date_entree', 'institution']\n    def create(self, validated_data):\n        password = validated_data.pop('password')\n        admin = Admin(**validated_data)\n        admin.set_password(password)  # Hachage du mot de passe\n        admin.save()\n        # Génération des identifiants sécurisés",
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "SuperAdminSerializer",
        "kind": 6,
        "importPath": "users.serializers",
        "description": "users.serializers",
        "peekOfCode": "class SuperAdminSerializer(UserSerializer):\n    class Meta(UserSerializer.Meta):\n        model = SuperAdmin\n        fields = UserSerializer.Meta.fields\nclass ParentSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True)\n    class Meta:\n        model = Parent\n        fields = ['email', 'password', 'nom', 'prenom', 'telephone', 'pays_residence', 'institution']\n    def create(self, validated_data):",
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "ParentSerializer",
        "kind": 6,
        "importPath": "users.serializers",
        "description": "users.serializers",
        "peekOfCode": "class ParentSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True)\n    class Meta:\n        model = Parent\n        fields = ['email', 'password', 'nom', 'prenom', 'telephone', 'pays_residence', 'institution']\n    def create(self, validated_data):\n        email = validated_data.get('email')\n        password = validated_data.pop('password')\n        # Vérifiez si un utilisateur avec cet email existe déjà\n        if get_user_model().objects.filter(email=email).exists():",
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "ApprenantSerializer",
        "kind": 6,
        "importPath": "users.serializers",
        "description": "users.serializers",
        "peekOfCode": "class ApprenantSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True)\n    class Meta:\n        model = Apprenant\n        fields = ['email', 'password', 'nom', 'prenom', 'telephone', 'pays_residence', 'matricule', 'date_naissance', 'groupe', 'tuteur', 'classe']\n    def create(self, validated_data):\n        # Récupérer le mot de passe et le retirer de validated_data\n        password = validated_data.pop('password')\n        email = validated_data.get('email')\n        # Créer l'utilisateur de base sans les champs spécifiques à Apprenant",
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "FormateurSerializer",
        "kind": 6,
        "importPath": "users.serializers",
        "description": "users.serializers",
        "peekOfCode": "class FormateurSerializer(UserSerializer):\n    institutions = serializers.PrimaryKeyRelatedField(queryset=Institution.objects.all(), many=True)\n    specialites = serializers.PrimaryKeyRelatedField(queryset=Specialite.objects.all(), many=True)\n    groupes = serializers.PrimaryKeyRelatedField(queryset=Groupe.objects.all(), many=True)\n    class Meta(UserSerializer.Meta):\n        model = Formateur\n        fields = UserSerializer.Meta.fields + ['institutions', 'specialites', 'groupes']\n    def create(self, validated_data):\n        institutions = validated_data.pop('institutions')\n        specialites = validated_data.pop('specialites')",
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "ResponsableAcademiqueSerializer",
        "kind": 6,
        "importPath": "users.serializers",
        "description": "users.serializers",
        "peekOfCode": "class ResponsableAcademiqueSerializer(UserSerializer):\n    # specialite = serializers.CharField()\n    class Meta(UserSerializer.Meta):\n        model = ResponsableAcademique\n        fields = UserSerializer.Meta.fields + ['institution', 'departement']\n    def create(self, validated_data):\n        responsable = ResponsableAcademique.objects.create_user(**validated_data)\n        activation_url = generate_activation_link(responsable, settings.FRONTEND_BASE_URL)\n        send_activation_email(responsable, subject=\"Activation du compte\", url=activation_url)\n        return responsable",
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "PasswordResetConfirmSerializer",
        "kind": 6,
        "importPath": "users.serializers",
        "description": "users.serializers",
        "peekOfCode": "class PasswordResetConfirmSerializer(serializers.Serializer):\n    new_password = serializers.CharField(write_only=True, min_length=8, max_length=128)\n    confirm_password = serializers.CharField(write_only=True, min_length=8, max_length=128)\n    def validate(self, data):\n        if data['new_password'] != data['confirm_password']:\n            raise serializers.ValidationError({\"error\": \"Les mots de passe ne correspondent pas.\"})\n        return data",
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "generate_activation_link",
        "kind": 2,
        "importPath": "users.serializers",
        "description": "users.serializers",
        "peekOfCode": "def generate_activation_link(user, frontend_url):\n    \"\"\"\n    Génère un lien d'activation sécurisé pour un utilisateur.\n    Args:\n        user (User): Instance de l'utilisateur pour lequel générer le lien d'activation.\n        frontend_url (str): URL de base de l'application frontend.\n    Returns:\n        str: Lien d'activation complet.\n    \"\"\"\n    # Génération des identifiants sécurisés",
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "create_super_admin_group",
        "kind": 2,
        "importPath": "users.signals",
        "description": "users.signals",
        "peekOfCode": "def create_super_admin_group(sender, **kwargs):\n    super_admin_group, created = Group.objects.get_or_create(name='SuperAdmin')\n    # Assigner toutes les permissions si le groupe est nouveau\n    if created:\n        for content_type in ContentType.objects.all():\n            permissions = Permission.objects.filter(content_type=content_type)\n            super_admin_group.permissions.add(*permissions)\n# Fonction pour créer un utilisateur SuperAdmin et l'ajouter au groupe\ndef create_super_admin_user(username, password):\n    User = get_user_model()",
        "detail": "users.signals",
        "documentation": {}
    },
    {
        "label": "create_super_admin_user",
        "kind": 2,
        "importPath": "users.signals",
        "description": "users.signals",
        "peekOfCode": "def create_super_admin_user(username, password):\n    User = get_user_model()\n    user = User.objects.create_user(username=username, password=password)\n    super_admin_group = Group.objects.get(name=\"SuperAdmin\")\n    user.groups.add(super_admin_group)\n    user.is_superuser = True  # Pour les privilèges de super utilisateur\n    user.is_staff = True  # Pour l'accès à l'administration\n    user.save()\n    return user\n@receiver(post_save, sender=get_user_model())",
        "detail": "users.signals",
        "documentation": {}
    },
    {
        "label": "send_verification_email",
        "kind": 2,
        "importPath": "users.signals",
        "description": "users.signals",
        "peekOfCode": "def send_verification_email(sender, instance, created, **kwargs):\n    \"\"\"\n    Envoie un e-mail de vérification après la création d'un utilisateur.\n    \"\"\"\n    # if created and not instance.is_active:  # Si l'utilisateur vient juste d'être créé et n'est pas encore activé\n    #     uid = urlsafe_base64_encode(str(instance.pk).encode())\n    #     token = default_token_generator.make_token(instance)\n    #     activation_link = reverse('activate_user', kwargs={'uidb64': uid, 'token': token})\n    #     activation_url = f\"{settings.FRONTEND_URL}{activation_link}\"\n    #     send_mail(",
        "detail": "users.signals",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "users.urls",
        "description": "users.urls",
        "peekOfCode": "urlpatterns = [\n    path('login/', UserLoginAPIView.as_view(), name='user-login'),\n    path('logout/', LogoutAPIView.as_view(), name='logout'),\n    path('admins/', AdminListCreateAPIView.as_view(), name='admin-list-create'),\n    path('apprenants/', ApprenantListCreateAPIView.as_view(), name='apprenant-list-create'),\n    path('superadmins/', SuperAdminListCreateAPIView.as_view(), name='superadmin-list-create'),\n    path('parents/', ParentListCreateAPIView.as_view(), name='parent-list-create'),\n    path('formateurs/', FormateurListCreateAPIView.as_view(), name='formateur-list-create'),\n    path('responsables-academiques/', ResponsableAcademiqueListCreateAPIView.as_view(), name='responsable-list-create'),\n    path('activate/<uidb64>/<token>/', ActivateUserAPIView.as_view(), name='activate_user'),",
        "detail": "users.urls",
        "documentation": {}
    },
    {
        "label": "send_verification_email",
        "kind": 2,
        "importPath": "users.utils",
        "description": "users.utils",
        "peekOfCode": "def send_verification_email(user):\n    \"\"\"\n    Envoie un e-mail de vérification au nouvel utilisateur.\n    \"\"\"\n    token = user.generate_email_verification_token()  # Implémentez une méthode pour générer un token sécurisé\n    verification_url = f\"{settings.FRONTEND_BASE_URL}{reverse('verify-email')}?{urlencode({'token': token})}\"\n    subject = \"Vérification de votre compte\"\n    message = f\"Bonjour {user.nom},\\n\\nCliquez sur le lien suivant pour vérifier votre e-mail : {verification_url}\\n\\nMerci !\"\n    send_mail(\n        subject,",
        "detail": "users.utils",
        "documentation": {}
    },
    {
        "label": "custom_exception_handler",
        "kind": 2,
        "importPath": "users.utils",
        "description": "users.utils",
        "peekOfCode": "def custom_exception_handler(exc, context):\n    \"\"\"\n    Gestionnaire personnalisé pour les exceptions.\n    \"\"\"\n    # Appelez le gestionnaire d'exceptions par défaut fourni par DRF\n    response = exception_handler(exc, context)\n    # Personnalisez le message pour certaines exceptions spécifiques\n    if isinstance(exc, NotAuthenticated):\n        return Response(\n            {",
        "detail": "users.utils",
        "documentation": {}
    },
    {
        "label": "send_activation_email",
        "kind": 2,
        "importPath": "users.utils",
        "description": "users.utils",
        "peekOfCode": "def send_activation_email(user, subject, url):\n    \"\"\"\n    Envoie un email d'activation à l'utilisateur.\n    Args:\n        user (User): Instance de l'utilisateur pour lequel envoyer l'email.\n        frontend_url (str): URL de base de l'application frontend.\n        subject (str): Sujet de l'email. Par défaut : \"Activer votre compte\".\n    \"\"\"\n    # Envoi de l'email\n    send_mail(",
        "detail": "users.utils",
        "documentation": {}
    },
    {
        "label": "UserLoginAPIView",
        "kind": 6,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "class UserLoginAPIView(APIView):\n    def post(self, request, *args, **kwargs):\n        serializer = UserLoginSerializer(data=request.data)\n        if serializer.is_valid():\n            user = serializer.validated_data['user']\n            # Vérifiez si l'utilisateur est activé\n            if not user.is_active:\n                return Response({\"message\": \"Le compte est désactivé.\"}, status=status.HTTP_400_BAD_REQUEST)\n            # Connectez l'utilisateur\n            login(request, user)",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "AdminListCreateAPIView",
        "kind": 6,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "class AdminListCreateAPIView(APIView):\n    def get(self, request, *args, **kwargs):\n        admins = Admin.objects.all()\n        serializer = AdminSerializer(admins, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    def post(self, request, *args, **kwargs):\n        serializer = AdminSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "ApprenantListCreateAPIView",
        "kind": 6,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "class ApprenantListCreateAPIView(APIView):\n    def get(self, request, *args, **kwargs):\n        apprenants = Apprenant.objects.all()\n        serializer = ApprenantSerializer(apprenants, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    def post(self, request, *args, **kwargs):\n        serializer = ApprenantSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "SuperAdminListCreateAPIView",
        "kind": 6,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "class SuperAdminListCreateAPIView(APIView):\n    def get(self, request, *args, **kwargs):\n        super_admins = SuperAdmin.objects.all()\n        serializer = SuperAdminSerializer(super_admins, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    def post(self, request, *args, **kwargs):\n        serializer = SuperAdminSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "ParentListCreateAPIView",
        "kind": 6,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "class ParentListCreateAPIView(APIView):\n    def get(self, request, *args, **kwargs):\n        parents = Parent.objects.all()\n        serializer = ParentSerializer(parents, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    def post(self, request, *args, **kwargs):\n        serializer = ParentSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "FormateurListCreateAPIView",
        "kind": 6,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "class FormateurListCreateAPIView(APIView):\n    def get(self, request, *args, **kwargs):\n        formateurs = Formateur.objects.all()\n        serializer = FormateurSerializer(formateurs, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    def post(self, request, *args, **kwargs):\n        serializer = FormateurSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "ResponsableAcademiqueListCreateAPIView",
        "kind": 6,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "class ResponsableAcademiqueListCreateAPIView(APIView):\n    def get(self, request, *args, **kwargs):\n        responsables = ResponsableAcademique.objects.all()\n        serializer = ResponsableAcademiqueSerializer(responsables, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    def post(self, request, *args, **kwargs):\n        serializer = ResponsableAcademiqueSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "ActivateUserAPIView",
        "kind": 6,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "class ActivateUserAPIView(APIView):\n    \"\"\"\n    APIView pour activer un utilisateur via un lien d'activation.\n    \"\"\"\n    def get(self, request, uidb64, token, *args, **kwargs):\n        try:\n            # Décoder l'UID\n            uid = urlsafe_base64_decode(uidb64).decode()\n            user = get_object_or_404(User, pk=uid)\n            # Vérifier le jeton",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "LogoutAPIView",
        "kind": 6,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "class LogoutAPIView(APIView):\n    \"\"\"\n    API pour déconnecter l'utilisateur en supprimant son token d'authentification.\n    \"\"\"\n    permission_classes = [IsAuthenticated]  # L'utilisateur doit être authentifié\n    def post(self, request, *args, **kwargs):\n        try:\n            # Supprimer le token de l'utilisateur connecté\n            token = Token.objects.get(user=request.user)\n            token.delete()",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "PasswordResetAPIView",
        "kind": 6,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "class PasswordResetAPIView(generics.GenericAPIView):\n    permission_classes = [AllowAny]\n    def post(self, request, *args, **kwargs):\n        email = request.data.get('email')\n        try:\n            user = get_user_model().objects.get(email=email)\n            uid = urlsafe_base64_encode(str(user.pk).encode())\n            token = default_token_generator.make_token(user)\n            # Construction du lien de réinitialisation\n            reset_link = reverse('password_reset_confirm', kwargs={'uidb64': uid, 'token': token})",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "PasswordResetConfirmAPIView",
        "kind": 6,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "class PasswordResetConfirmAPIView(generics.GenericAPIView):\n    serializer_class = PasswordResetConfirmSerializer\n    def post(self, request, uidb64, token, *args, **kwargs):\n        try:\n            uid = force_str(urlsafe_base64_decode(uidb64))\n            user = User.objects.get(pk=uid)\n        except (TypeError, ValueError, OverflowError, User.DoesNotExist):\n            return Response({\"error\": \"Lien invalide ou utilisateur non trouvé.\"}, status=status.HTTP_400_BAD_REQUEST)\n        if not default_token_generator.check_token(user, token):\n            return Response({\"error\": \"Jeton invalide ou expiré.\"}, status=status.HTTP_400_BAD_REQUEST)",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "activate_user_view",
        "kind": 2,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "def activate_user_view(request, uidb64, token):\n    try:\n        uid = force_str(urlsafe_base64_decode(uidb64))\n        user = User.objects.get(pk=uid)\n    except (TypeError, ValueError, OverflowError, User.DoesNotExist):\n        user = None\n    if user is not None and default_token_generator.check_token(user, token):\n        user.is_active = True  # Activer l'utilisateur\n        user.save()\n        return HttpResponse(\"Votre compte a été activé avec succès.\")",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'prograppApi.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]